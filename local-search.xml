<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>动态数组手撕</title>
    <link href="/2024/01/31/%E5%8A%A8%E6%80%81%E6%95%B0%E7%BB%84%E6%89%8B%E6%92%95/"/>
    <url>/2024/01/31/%E5%8A%A8%E6%80%81%E6%95%B0%E7%BB%84%E6%89%8B%E6%92%95/</url>
    
    <content type="html"><![CDATA[<h2 id="一、动态数组的数据结构"><a href="#一、动态数组的数据结构" class="headerlink" title="一、动态数组的数据结构"></a>一、动态数组的数据结构</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">DynamicArray</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-comment">// 指向数据存储空间的指针</span><br>    ELEMENTTYPE *data;<br><span class="hljs-comment">// 描述当前数据所占的内存块大小和已经使用的内存块大小</span><br>    <span class="hljs-type">int</span> size;    <span class="hljs-comment">// 元素个数</span><br>    <span class="hljs-type">int</span> capacity;<span class="hljs-comment">// 容量大小</span><br>&#125; DynamicArray;<br></code></pre></td></tr></table></figure><hr><h2 id="二、动态数组的函数"><a href="#二、动态数组的函数" class="headerlink" title="二、动态数组的函数"></a>二、动态数组的函数</h2><h3 id="初始化与销毁"><a href="#初始化与销毁" class="headerlink" title="初始化与销毁"></a>初始化与销毁</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* 动态数组初始化。</span><br><span class="hljs-comment"> * @param pArray  指向动态数组数据存放位置的指针。</span><br><span class="hljs-comment"> * @parameter capacity  动态数组的初始容量。</span><br><span class="hljs-comment"> * @return 非零表示失败。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">dynamicArrayInit</span><span class="hljs-params">(DynamicArray *pArray, <span class="hljs-type">int</span> capacity)</span>;<br></code></pre></td></tr></table></figure><p><strong>初始化函数<code>dynamicArrayInit()</code>：</strong></p><ul><li><code>判空</code>，判断传入参数<code>pArray</code>是否为空。</li><li>判断<code>capacity</code>范围是否合法。</li><li><code>malloc</code>申请内存空间。</li><li>检查<code>malloc</code>申请内存空间是否成功。</li><li>清除脏数据，将<code>malloc</code>申请的内存空间数据设置为全<code>0</code>。</li><li>初始化<code>size</code>和<code>capacity</code>的值。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* 动态数组初销毁并释放内存空间。</span><br><span class="hljs-comment"> * @param pArray  指向动态数组数据存放位置的指针。</span><br><span class="hljs-comment"> * @return 非零表示失败。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">dynamicArrayDestory</span><span class="hljs-params">(DynamicArray *pArray)</span>;<br></code></pre></td></tr></table></figure><p><strong>销毁函数<code>dynamicArrayDestory()</code>：</strong></p><ul><li>判空。</li><li>先判断<code>free()</code>函数作用的地址空间是否合法，即是否为<code>malloc()</code>、<code>calloc()</code>、<code>realloc()</code>等动态内存分配函数所返回的指针所指向的内存空间。若合法，则使用<code>free()</code>函数释放内存空间。</li><li>将数据区的内存指针指向<code>NULL</code>，用于指明当前的动态数组已经被销毁。</li></ul><h3 id="扩容与缩容"><a href="#扩容与缩容" class="headerlink" title="扩容与缩容"></a>扩容与缩容</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* 动态数组扩容</span><br><span class="hljs-comment"> * @param pArray 动态数组数据初始位置。</span><br><span class="hljs-comment"> * @return 非零表示失败。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">expandDynamicArrayCapacity</span><span class="hljs-params">(DynamicArray *pArray)</span>;<br><br><span class="hljs-comment">/* 动态数组缩容</span><br><span class="hljs-comment"> * @param pArray 动态数组数据初始位置。</span><br><span class="hljs-comment"> * @return 非零表示失败。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">shrinkDynamicArrayCapacity</span><span class="hljs-params">(DynamicArray *pArray)</span>;<br></code></pre></td></tr></table></figure><p><strong>动态数组扩容<code>expandDynamicArrayCapacity()</code>：</strong></p><ul><li>数据备份。</li><li>分配一块<code>更大</code>的内存空间。</li><li><code>malloc</code>申请内存空间。</li><li>新空间判空并清除脏数据。</li><li>数据迁移。</li><li>释放旧的内存空间。</li><li>更新数组容量。</li></ul><p><strong>动态数组缩容<code>shrinkDynamicArrayCapacity()</code>：</strong></p><ul><li>数据备份。</li><li>分配一块<code>更小</code>的内存空间。</li><li><code>malloc</code>申请内存空间。</li><li>新空间判空并清除脏数据。</li><li>数据迁移。</li><li>释放旧的内存空间。</li><li>更新数组容量。</li></ul><h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* 动态数组插入元素。</span><br><span class="hljs-comment"> * @param *pArray  动态数组数据初始位置。</span><br><span class="hljs-comment"> * @param data  要插入的数据。</span><br><span class="hljs-comment"> * @return 非零表示失败。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">dynamicArrayInsertData</span><span class="hljs-params">(DynamicArray *pArray, ELEMENTTYPE data)</span>;<br><br><span class="hljs-comment">/* 动态数组在指定位置插入数组。</span><br><span class="hljs-comment"> * @param *pArray  动态数组数据初始位置。</span><br><span class="hljs-comment"> * @param pos  插入位置。</span><br><span class="hljs-comment"> * @param data  要插入的数据。</span><br><span class="hljs-comment"> * @return 非零表示失败。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">dynamicArrayAppointPosInsertData</span><span class="hljs-params">(DynamicArray *pArray, <span class="hljs-type">int</span> pos, ELEMENTTYPE data)</span>;<br><br><span class="hljs-comment">/* 根据元素的值，获取数据的位置。</span><br><span class="hljs-comment"> * @param *pArray  动态数组数据初始位置。</span><br><span class="hljs-comment"> * @param *pos  返回指向存放元素位置的地址空间的指针。</span><br><span class="hljs-comment"> * @param data  要查找的数据。</span><br><span class="hljs-comment"> * @return 非零表示查找失败。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">dynamicArrayAppointDataGetPos</span><span class="hljs-params">(DynamicArray *pArray, <span class="hljs-type">int</span> data, <span class="hljs-type">int</span> *pos)</span>;<br></code></pre></td></tr></table></figure><p><strong>默认插入<code>dynamicArrayInsertData()</code>：</strong></p><ul><li>调用指定位置插入函数<code>dynamicArrayAppointPosInsertData()</code>在数组末尾处插入即可，<code>pos</code>设置为<code>pArray-&gt;size</code>。</li></ul><p><strong>在指定位置出插入<code>dynamicArrayAppointPosInsertData()</code>：</strong></p><ul><li>判空。</li><li>判断插入位置是否合法，即插入的位置要在动态数组的<code>非空</code>数据区。</li><li>判断数组空间是否告急，若告急调用<code>扩容</code>函数。</li><li>将插入位置之后的非空数据区数据依次向后移动一个位置。</li><li>将要插入的数据赋值给插入位置。</li><li>更新动态数组数据个数<code>size</code>。</li></ul><p><strong>查找与<code>data</code>相同的数据所在地位置<code>dynamicArrayAppointDataGetPos()</code>：</strong></p><ul><li>找到第一个与<code>data</code>相同的数据所在的位置，并返回查找成功标识<code>0</code>。</li><li>若未找到返回<code>-1</code>。</li></ul><h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* 获取动态数组元素个数。</span><br><span class="hljs-comment"> * @param *pArray  动态数组数据初始位置。</span><br><span class="hljs-comment"> * @param *pSize 返回指向存放元素个数的地址空间的指针。</span><br><span class="hljs-comment"> * @return 非零表示失败。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">dynamicArrayGetSize</span><span class="hljs-params">(DynamicArray *pArray, <span class="hljs-type">int</span> *pSize)</span>;<br><br><span class="hljs-comment">/* 获取动态数组容量。</span><br><span class="hljs-comment"> * @param *pArray  动态数组数据初始位置。</span><br><span class="hljs-comment"> * @param *pCapacity  返回指向存放容量的地址空间的指针。</span><br><span class="hljs-comment"> * @return 非零表示失败。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">dynamicArrayGetCapacity</span><span class="hljs-params">(DynamicArray *pArray, <span class="hljs-type">int</span> *pCapacity)</span>;<br><br><span class="hljs-comment">/* 获取指定位置的值。</span><br><span class="hljs-comment"> * @param *pArray  动态数组数据初始位置。</span><br><span class="hljs-comment"> * @param pos  要查找的位置。</span><br><span class="hljs-comment"> * @param *pData  返回指向存放数据的地址空间的指针。</span><br><span class="hljs-comment"> * @return 非零表示失败。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">dynamicArrayGetAppointPosData</span><span class="hljs-params">(DynamicArray *pArray, <span class="hljs-type">int</span> pos, <span class="hljs-type">int</span> *data)</span>;<br></code></pre></td></tr></table></figure><p><strong>获取动态数组元素个数<code>dynamicArrayGetSize()</code>：</strong></p><ul><li>判空，<code>pArray</code>与<code>pSize</code>。</li><li>将元素个数放在<code>pSize</code>指向的内存空间。</li></ul><p><strong>获取动态数组容量<code>dynamicArrayGetCapacity()</code>：</strong></p><ul><li>判空，<code>pArray</code>与<code>pCapacity</code>。</li><li>将数组容量放在<code>pCapacity</code>指向的内存空间。</li></ul><p><strong>获取指定位置的值<code>dynamicArrayGetAppointPosData()</code>：</strong></p><ul><li>判空，<code>pArray</code>与<code>data</code>。</li><li>判断<code>pos</code>的合法性。</li><li>将数据放在<code>data</code>指向的内存空间。</li></ul><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* 动态数组删除元素，默认删除末尾元素。</span><br><span class="hljs-comment"> * @param pArray 动态数组数据初始位置。</span><br><span class="hljs-comment"> * @return 非零表示失败。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">dynamicArrayDeleteData</span><span class="hljs-params">(DynamicArray *pArray)</span>;<br><br><span class="hljs-comment">/* 在指定位置删除元素。</span><br><span class="hljs-comment"> * @param pArray  动态数组数据初始位置。</span><br><span class="hljs-comment"> * @param pos  要删除的数据所在的位置。</span><br><span class="hljs-comment"> * @return 非零表示失败。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">dynamicArrayAppointPosDeleteData</span><span class="hljs-params">(DynamicArray *pArray, <span class="hljs-type">int</span> pos)</span>;<br><br><span class="hljs-comment">/* 动态数组删除指定的值。</span><br><span class="hljs-comment"> * @param pArray  动态数组数据初始位置。</span><br><span class="hljs-comment"> * @param data  要删除的数据。</span><br><span class="hljs-comment"> * @return 非零表示失败。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">dynamicArrayDeleteAppointData</span><span class="hljs-params">(DynamicArray *pArray, ELEMENTTYPE data)</span>;<br></code></pre></td></tr></table></figure><p><strong>默认删除<code>dynamicArrayDeleteData()</code>：</strong></p><ul><li>调用指定位置删除函数<code>dynamicArrayAppointPosDeleteData()</code>在数组末尾处删除即可，<code>pos</code>设置为<code>pArray-&gt;size</code>。</li></ul><p><strong>指定位置删除<code>dynamicArrayAppointPosDeleteData()</code>：</strong></p><ul><li>判空。</li><li>判断删除位置是否合法，即插入的位置要在动态数组的<code>非空</code>数据区。</li><li>判断数组空间是否<code>冗余</code>，若冗余调用<code>缩容</code>函数。</li><li>将要删除的数据设置为<code>0</code>。</li><li>将删除位置之后的非空数据区数据依次向前移动一个位置。</li><li>更新动态数组数据个数<code>size</code>。</li></ul><p><strong>删除指定数据<code>dynamicArrayDeleteAppointData()</code>：</strong></p><ul><li>判空。</li><li>挨个查找并删除数据与<code>data</code>相同的数据。</li><li>当查找失败时结束函数。</li></ul><h2 id="附-源码"><a href="#附-源码" class="headerlink" title="*附.源码"></a>*附.源码</h2><p>*附.<a href="http://beishan.online/2024/01/31/%E5%8A%A8%E6%80%81%E6%95%B0%E7%BB%84%E6%BA%90%E7%A0%81/">动态数组源码</a></p>]]></content>
    
    
    <categories>
      
      <category>C语言数据结构</category>
      
      <category>动态数组</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C语言</tag>
      
      <tag>数据结构</tag>
      
      <tag>算法手撕</tag>
      
      <tag>内存空间</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>动态数组基本概念</title>
    <link href="/2024/01/31/%E5%8A%A8%E6%80%81%E6%95%B0%E7%BB%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
    <url>/2024/01/31/%E5%8A%A8%E6%80%81%E6%95%B0%E7%BB%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</url>
    
    <content type="html"><![CDATA[<h2 id="最简单的数据结构-动态数组"><a href="#最简单的数据结构-动态数组" class="headerlink" title="最简单的数据结构-动态数组"></a>最简单的数据结构-动态数组</h2><h3 id="一、静态数组的诸多问题"><a href="#一、静态数组的诸多问题" class="headerlink" title="一、静态数组的诸多问题"></a>一、静态数组的诸多问题</h3><p>静态数组在编译时需要确定它的大小，且一旦确定好了数组大小，在程序运行中就无法改变其大小，主要会导致以下问题：</p><ul><li><code>内存浪费</code> 由于一开始并不知道应该分配的内存空间的大小，因此当数据量很小而分配的数组空间很大时，会导致内存资源的浪费。</li><li><code>不灵活</code> 当需要存储的数据大小超过了数组的大小时，需要程序员手动修改数组的大小，而程序运行过程中是无法做这些申请的。</li><li>此外，数组一般存放在内存<code>栈区</code>，由编译器自行管理和分配，对程序员是不可见的。一般来说，内存栈区的大小很小，因此使用过多的数组很容易导致栈溢出错误。</li></ul><h3 id="二、动态数组需要解决的问题"><a href="#二、动态数组需要解决的问题" class="headerlink" title="二、动态数组需要解决的问题"></a>二、动态数组需要解决的问题</h3><p>对于静态数组会导致的<code>内存浪费</code>，<code>扩展不灵活</code>，以及<code>栈溢出风险</code>等问题，必须设计一种新的数据结构来解决这些程序设计过程中的问题。</p><p><strong>静态数组的初始化、增删改查以及销毁的设计原则主要有以下几点：</strong></p><h4 id="1-安全性"><a href="#1-安全性" class="headerlink" title="1. 安全性"></a>1. 安全性</h4><p><em><strong>用指针代替数组</strong></em></p><p>静态数组存储在栈中，因此无法存储过大的数据量，因此在定义动态数组的数据结构时，不宜使用数组，应该用指针代替。否则会使用到大量的栈内存空间，导致栈溢出错误。</p><h4 id="2-实现简单"><a href="#2-实现简单" class="headerlink" title="2. 实现简单"></a>2. 实现简单</h4><p>在设计动态数组的数据结构和函数时，需要注意：</p><ul><li>数据结构的实现应该尽量简单。</li><li>函数中不宜存在大量的递归和嵌套。</li><li>在保证代码可读性的基础上尽可能提升代码的执行效率。</li></ul><h4 id="3-O-1-查找"><a href="#3-O-1-查找" class="headerlink" title="3. O(1)查找"></a>3. O(1)查找</h4><p>动态数组需要保留数组的特性，即O(1)查找，在申请内存空间时需要申请一段连续的内存空间。</p><h4 id="4-节约内存与灵活分配存储空间"><a href="#4-节约内存与灵活分配存储空间" class="headerlink" title="4. 节约内存与灵活分配存储空间"></a>4. 节约内存与灵活分配存储空间</h4><p>静态数组的大小应该与当前实时的动态数组中有效的数据量大小相差不多，即需要根据数据量所占内存空间的大小建立相应的动态数组。在数组初始化、删除、修改和查找动态数组数据时会改变动态数组的大小，需要设计相应的数据算法。</p><h5 id="初始化："><a href="#初始化：" class="headerlink" title="初始化："></a>初始化：</h5><p>在<code>初始化</code>动态数组时，传入与数据量大小相关的一个变量：</p><p><em><strong>算法思想：</strong></em></p><ol><li>直接根据数据量大小新建一个同样大小的动态数组。</li><li>根据传入的数据个数，建立一个有一定空内存空间的动态数组，空内存空间与有数据的内存空间的比例应该适当，例如<code>2:8</code>。</li><li>在传入的数据个数的基础上加上一个固定的数字留作特殊情况的使用，例如<code>10</code>。</li></ol><h5 id="删除修改："><a href="#删除修改：" class="headerlink" title="删除修改："></a>删除修改：</h5><p>当动态数组<code>删除</code>或<code>修改</code>数据时，会改变动态数组中有效数据的个数。因此，需要根据当前空内存空间的大小对动态数组的空间进行调整。</p><p><em><strong>算法思想：</strong></em></p><p>何时进行<code>扩容</code>、<code>收缩</code>：</p><ol><li>当空数据数量达到一定<code>个数</code>时就重新对动态数组进行<code>扩展</code>或<code>收缩</code>。</li><li>当空数据所占<code>比例</code>达到一定值时，对动态数组进行<code>扩展</code>或<code>收缩</code>。</li></ol><p><code>扩容</code>、<code>收缩</code>方法：</p><ol><li>每次<code>扩容</code>、<code>收缩</code>一定倍数。</li><li>每次<code>扩容</code>、<code>收缩</code>固定比例。</li><li>自定义<code>扩容</code>、<code>收缩</code>比例或个数。</li></ol><h5 id="查找："><a href="#查找：" class="headerlink" title="查找："></a>查找：</h5><p>既然动态数组是一种数据类型，因此在实际使用过程中会设计到查找特定数据，例如：在一个学校的教务系统中查找某一个班的学生并返回查找结果。</p><p><em><strong>算法思想：</strong></em></p><p>只需要根据需要传出的数据大小按照初始化的设计思想返回一个数组即可。</p><h3 id="三、动态数组区别于数组的特性"><a href="#三、动态数组区别于数组的特性" class="headerlink" title="三、动态数组区别于数组的特性"></a>三、动态数组区别于数组的特性</h3><h4 id="1-添加元素"><a href="#1-添加元素" class="headerlink" title="1. 添加元素"></a>1. 添加元素</h4><p>只支持两种添加元素的方法：</p><ul><li>在第一个空元素位置处插入。</li><li>在非空位置插入：将当前位置以及后续位置的非空数据依次往后顺移一个位置后插入。</li></ul><h4 id="2-数组扩容"><a href="#2-数组扩容" class="headerlink" title="2. 数组扩容"></a>2. 数组扩容</h4><p>当向动态数组中添加数据时，会发生扩容：扩容操作会分配一个新的内存空间，将原有的元素全部拷贝到新的内存空间中，并释放原有的内存空间。</p><h4 id="3-数组缩容"><a href="#3-数组缩容" class="headerlink" title="3. 数组缩容"></a>3. 数组缩容</h4><p>当删除数组中的数据时，或发送缩容：也是会申请一个新的内存空间，将原有的元素全部拷贝到新的内存空间中，并释放原有的内存空间。</p><h4 id="4-删除元素"><a href="#4-删除元素" class="headerlink" title="4. 删除元素"></a>4. 删除元素</h4><p>当进行删除操作时，需要将当前删除的位置处所有的数据往前移动一个位置。</p>]]></content>
    
    
    <categories>
      
      <category>C语言数据结构</category>
      
      <category>动态数组</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程</tag>
      
      <tag>数据结构</tag>
      
      <tag>动态数组</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux命令</title>
    <link href="/2024/01/31/Linux%E5%91%BD%E4%BB%A4/"/>
    <url>/2024/01/31/Linux%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="linux命令："><a href="#linux命令：" class="headerlink" title="linux命令："></a>linux命令：</h1><h2 id="一、-man-manul-操作手册"><a href="#一、-man-manul-操作手册" class="headerlink" title="一、 man (manul) 操作手册"></a>一、 man (manul) 操作手册</h2><p>命令格式：<code>man &lt;linux命令&gt;</code></p><p>命令参数：</p><p>使用man + 需要查找的Linux命令，可以获取当前Linux命令的操作手册，因为是本地读取，所以不需要联网。在其他命令工具中，也可以使用 <code>-h</code> <code>--h</code> <code>-help</code> <code>--help</code>来获取操作手册。</p><hr><h2 id="二、-ls-List-查看当前目录文档"><a href="#二、-ls-List-查看当前目录文档" class="headerlink" title="二、 ls (List) 查看当前目录文档"></a>二、 ls (List) 查看当前目录文档</h2><p>命令格式：<code>ls</code></p><p>命令参数：<code>-f</code> <code>-alh</code> <code>-l</code> <code>-a</code></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cmd">ls <br>ls -a# 显示当前目录下所有文件信息<br>ls -l# 显示文件的详细属性信息<br>ls -al# 显示所有文件的详细属性信息<br></code></pre></td></tr></table></figure><hr><h2 id="三、-cd-change-directory-进入工作目录"><a href="#三、-cd-change-directory-进入工作目录" class="headerlink" title="三、 cd (change directory) 进入工作目录"></a>三、 cd (change directory) 进入工作目录</h2><p>命令格式：<code>cd [路径名称]</code></p><p>命令参数：<code> </code> <code>/</code> <code>~</code> <code>..</code> <code>../..</code> <code>!$</code></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-built_in">cd</span>    # 进入用户主目录；<br><span class="hljs-built_in">cd</span> /  # 进入根目录<br><span class="hljs-built_in">cd</span> ~  # 进入用户主目录；<br><span class="hljs-built_in">cd</span> ..  # 返回上级目录（若当前目录为“/“，则执行完后还在“/&quot;；&quot;..&quot;为上级目录的意思）；<br><span class="hljs-built_in">cd</span> ../..  # 返回上两级目录；<br><span class="hljs-built_in">cd</span> !$  # 把上个命令的参数作为<span class="hljs-built_in">cd</span>参数使用。<br></code></pre></td></tr></table></figure><hr><h2 id="四、-pwd-Print-working-direction-查看当前工作路径"><a href="#四、-pwd-Print-working-direction-查看当前工作路径" class="headerlink" title="四、 pwd (Print working direction) 查看当前工作路径."></a>四、 pwd (Print working direction) 查看当前工作路径.</h2><p>命令格式：<code>pwd [选项]</code></p><p>命令参数：</p><ul><li><code>-P</code> 输出物理路径，不输出符号连接路径。</li><li><code>-L</code> 输出连接路径，包含符号链接(symbolic link，即快捷方式)。</li></ul><hr><h2 id="五、-mv-Move-file-移动或重命名文件"><a href="#五、-mv-Move-file-移动或重命名文件" class="headerlink" title="五、 mv (Move file) 移动或重命名文件"></a>五、 mv (Move file) 移动或重命名文件</h2><p>命令格式：<code>mv [格式] [源文件名] [目标文件名]</code></p><p>命令参数：</p><ul><li><code>-f</code> 强制覆盖已有的文件。</li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cmd">mv file1.<span class="hljs-built_in">md</span> file2.<span class="hljs-built_in">md</span> # 对现有文件进行重命名操作<br>mv file1.<span class="hljs-built_in">md</span> /floder # 移动文件到文件夹floder下并保留原有的文件名<br>mv Dir1 /floder/Dir2 # 移动指定目录Dir1到floder文件夹下并重命名为Dir2<br>mv -f /home/* . #将/home目录中所有的文件都移动到当前工作目录中，若遇到文件已存在则直接覆盖<br></code></pre></td></tr></table></figure><hr><h2 id="六、-rm-remove-删除指定文件"><a href="#六、-rm-remove-删除指定文件" class="headerlink" title="六、 rm (remove) 删除指定文件"></a>六、 rm (remove) 删除指定文件</h2><p>命令格式：<code>rm [参数] [文件名]</code></p><p>命令参数：<code>-d</code> <code>-f</code> <code>-rf</code> <code>-rf /*</code> </p><ul><li><code>-d</code> 删除没有子文件的空目录</li><li><code>-f</code> 强制删除</li><li><code>-rf</code> 强制删除工作目录内所有的子文件</li><li><code>-rf /*</code> 强制删除系统内所有文件</li></ul><hr><h2 id="七、-vi-Visual-Editor-文本编辑器"><a href="#七、-vi-Visual-Editor-文本编辑器" class="headerlink" title="七、 vi (Visual Editor) 文本编辑器"></a>七、 vi (Visual Editor) 文本编辑器</h2><p>命令格式：<code>vi [文件名]</code></p><p>命令参数：</p><p>使用  <code>vi</code>  命令编辑文件时如果没有这个文件，则自动创建这个文件。使用  <strong>vi</strong>  命令编辑文件时，默认以只读方式进入这个文件，在单击  <strong>i</strong>  后方可对文件进行插入和修改。在编辑完成后，按<code>Esc</code>，输入<code>:wq</code> 方可退出文件。</p><hr><h2 id="八、-sudo-super-user-do-授权普通用户执行管理员命令"><a href="#八、-sudo-super-user-do-授权普通用户执行管理员命令" class="headerlink" title="八、 sudo (super user do) 授权普通用户执行管理员命令"></a>八、 sudo (super user do) 授权普通用户执行管理员命令</h2><p>命令格式：<code>sudo [参数] [命令]</code></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">sudo <span class="hljs-built_in">mkdir</span> floder # 执行特权指令新建文件夹floder<br></code></pre></td></tr></table></figure><p>命令参数：<code>-u</code> </p><p>修改当前登录用户：</p><ol><li>执行<code>sudo passwd root</code>命令，输入密码和新密码</li><li>执行<code>su</code>命令</li><li>即可修改当前登录用户为root用户</li></ol><hr><h2 id="九、-touch-创建空文件和修改时间戳"><a href="#九、-touch-创建空文件和修改时间戳" class="headerlink" title="九、 touch 创建空文件和修改时间戳"></a>九、 touch 创建空文件和修改时间戳</h2><p>命令格式：<code>touch [参数] [文件名]</code></p><p>命令参数：<code>-d</code></p><ul><li><code>-d</code> 设置时间与日期</li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cmd">touch file.txt # 创建指定名称的空文件<br>touch file&#123;<span class="hljs-number">1</span>..<span class="hljs-number">5</span>&#125;.txt # 创建多个指定名称的空文件<br>touch -d &quot;<span class="hljs-number">2024</span>-<span class="hljs-number">01</span>-<span class="hljs-number">22</span> <span class="hljs-number">14</span>:<span class="hljs-number">58</span>&quot; file.txt # 修改指定文件的查看时间和修改时间<br></code></pre></td></tr></table></figure><hr><h2 id="十、-cp-copy-复制文件"><a href="#十、-cp-copy-复制文件" class="headerlink" title="十、 cp (copy) 复制文件"></a>十、 cp (copy) 复制文件</h2><p>命令格式：<code>cp [参数] [原文件名] [目标文件名]</code></p><p>命令参数：<code>-r</code> <code>-f</code></p><ul><li><code>-r</code> 复制指定的目录，并定义新的目录名称</li><li><code>-f</code> 将指定文件复制到&#x2F;etc目录中，并覆盖已有文件</li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmd">cp -r Dir1 Dir2 #复制目录Dir1，并定义新的目录名称为Dir2<br>cp -f File1.txt /Dir2 # 将指定文件复制到/Dir2目录中，并覆盖已有文件<br></code></pre></td></tr></table></figure><hr><h2 id="十一、-mkdir-Make-Direction-新建、重命名、移动目录文件"><a href="#十一、-mkdir-Make-Direction-新建、重命名、移动目录文件" class="headerlink" title="十一、 mkdir (Make Direction) 新建、重命名、移动目录文件"></a>十一、 mkdir (Make Direction) 新建、重命名、移动目录文件</h2><p>命令格式：<code>mkdir [参数] [目录名]</code></p><p>命令参数：<code>-p</code></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-built_in">mkdir</span> Dir1 # 创建目录文件Dir1<br><span class="hljs-built_in">mkdir</span> Dir3 Dir4 Dir5 # 创建多个目录文件<br><span class="hljs-built_in">mkdir</span> -p /Dir1/Dir2/Dir3/Dir4/Dir5 # 多级嵌套创造文件夹<br></code></pre></td></tr></table></figure><hr><h2 id="十二、-cat-concatenate-files-and-print-预览文档内容"><a href="#十二、-cat-concatenate-files-and-print-预览文档内容" class="headerlink" title="十二、 cat (concatenate files and print) 预览文档内容"></a>十二、 cat (concatenate files and print) 预览文档内容</h2><p>命令格式： <code>cat [参数] [文件名]</code></p><p>命令参数：<code>-n</code> </p><ul><li><code>-n</code> 输出文档内容时显示行号</li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmd">cat file.c# 预览文档file.c的内容<br>cat -n file.c # 预览文档file.c的内容，并显示行号<br></code></pre></td></tr></table></figure><hr><h2 id="十三、-gcc-GNU-Compiler-Collection-C-C-编译器"><a href="#十三、-gcc-GNU-Compiler-Collection-C-C-编译器" class="headerlink" title="十三、 gcc (GNU Compiler Collection) C&#x2F;C++编译器"></a>十三、 gcc (GNU Compiler Collection) C&#x2F;C++编译器</h2><p>命令格式：<code>gcc [参数] [文件名] [-o] [可执行文件名]</code></p><p>命令参数：<code>-o</code> <code>-E</code> <code>-S</code> <code>-c</code> </p><ul><li><p><code>-o</code> 编译指定文件，并生成可执行文件</p></li><li><p><code>-E</code> 对源程序进行预处理，并生成<code>.i</code>文件</p></li><li><p><code>-S</code> 对预处理后的<code>.i</code>文件进行汇编操作，并生成<code>.s</code>文件</p></li><li><p><code>-c</code> 对汇编处理后的<code>.s</code>文件进行编译操作生成<code>.o</code>文件</p></li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cmd">gcc File.c <br>gcc File.c -o linux # 编译指定文件，并生成可执行文件<br>gcc -E File.c -o linux.i # 对源程序进行预处理，并生成`.i`文件<br>gcc -S File.i -o linux.s # 对预处理后的`.i`文件进行汇编操作，并生成`.s`文件<br>gcc -c File.s -o linux.o # 对汇编处理后的`.s`文件进行编译操作生成`.o`文件<br>gcc File.o -o linux # 对编译处理后的指定文件进行链接操作<br></code></pre></td></tr></table></figure><p>编译包括四个阶段：</p><ul><li><p>预编译（Preprocessing）</p></li><li><p>编译（Compilation）</p></li><li><p>汇编（Assembly）</p></li><li><p>链接（Linking）</p></li></ul><p>编译完后生成的文件类型为<code>.exe</code>文件，文件描述为-rwxr-xr-x文件。</p><hr><h2 id="十四、-ifconfig-network-interfaces-configuring-设置网络设备参数信息"><a href="#十四、-ifconfig-network-interfaces-configuring-设置网络设备参数信息" class="headerlink" title="十四、 ifconfig (network interfaces configuring) 设置网络设备参数信息"></a>十四、 ifconfig (network interfaces configuring) 设置网络设备参数信息</h2><p>命令格式：<code>ifconfig [参数] [网卡名] [动作]</code></p><p>命令参数：<code>-a</code> <code>-v</code> <code>-s</code> </p><ul><li><code>-a</code> 显示所有网卡状态</li><li><code>-v</code> 显示执行工程的详细信息</li><li><code>-s</code> 显示剪短状态列表</li></ul><p>命令动作：<code>add</code> <code>down</code> <code>del</code> <code>up</code> </p><ul><li><code>add</code> 设置网络设备的IP地址</li><li><code>down</code> 关闭指定的网络设备</li><li><code>del</code> 删除网络设备的IP地址</li><li><code>up</code> 启动指定的网络设备</li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-function">root@iZbp11t02fism5k702usgjZ:~# <span class="hljs-title">ifconfig</span></span><br><span class="hljs-function"><span class="hljs-title">eth0</span>: <span class="hljs-title">flags</span>=4163&lt;<span class="hljs-title">UP</span>,<span class="hljs-title">BROADCAST</span>,<span class="hljs-title">RUNNING</span>,<span class="hljs-title">MULTICAST</span>&gt;  <span class="hljs-title">mtu</span> 1500</span><br><span class="hljs-function">        <span class="hljs-title">inet</span> 172.26.227.166  <span class="hljs-title">netmask</span> 255.255.240.0  <span class="hljs-title">broadcast</span> 172.26.239.255</span><br><span class="hljs-function">        <span class="hljs-title">inet6</span> <span class="hljs-title">fe80</span>::216:3<span class="hljs-title">eff:fe27</span>:8<span class="hljs-title">c6c</span>  <span class="hljs-title">prefixlen</span> 64  <span class="hljs-title">scopeid</span> 0<span class="hljs-title">x20</span>&lt;<span class="hljs-title">link</span>&gt;</span><br><span class="hljs-function">        <span class="hljs-title">ether</span> 00:16:3<span class="hljs-title">e</span>:27:8<span class="hljs-title">c</span>:6<span class="hljs-title">c</span>  <span class="hljs-title">txqueuelen</span> 1000  (<span class="hljs-title">Ethernet</span>)</span><br><span class="hljs-function">        <span class="hljs-title">RX</span> <span class="hljs-title">packets</span> 1025506  <span class="hljs-title">bytes</span> 1004767395 (1.0 <span class="hljs-title">GB</span>)</span><br><span class="hljs-function">        <span class="hljs-title">RX</span> <span class="hljs-title">errors</span> 0  <span class="hljs-title">dropped</span> 0  <span class="hljs-title">overruns</span> 0  <span class="hljs-title">frame</span> 0</span><br><span class="hljs-function">        <span class="hljs-title">TX</span> <span class="hljs-title">packets</span> 533410  <span class="hljs-title">bytes</span> 298301872 (298.3 <span class="hljs-title">MB</span>)</span><br><span class="hljs-function">        <span class="hljs-title">TX</span> <span class="hljs-title">errors</span> 0  <span class="hljs-title">dropped</span> 0 <span class="hljs-title">overruns</span> 0  <span class="hljs-title">carrier</span> 0  <span class="hljs-title">collisions</span> 0</span><br><span class="hljs-function"></span><br><span class="hljs-function"><span class="hljs-title">lo</span>: <span class="hljs-title">flags</span>=73&lt;<span class="hljs-title">UP</span>,<span class="hljs-title">LOOPBACK</span>,<span class="hljs-title">RUNNING</span>&gt;  <span class="hljs-title">mtu</span> 65536</span><br><span class="hljs-function">        <span class="hljs-title">inet</span> 127.0.0.1  <span class="hljs-title">netmask</span> 255.0.0.0</span><br><span class="hljs-function">        <span class="hljs-title">inet6</span> ::1  <span class="hljs-title">prefixlen</span> 128  <span class="hljs-title">scopeid</span> 0<span class="hljs-title">x10</span>&lt;<span class="hljs-title">host</span>&gt;</span><br><span class="hljs-function">        <span class="hljs-title">loop</span>  <span class="hljs-title">txqueuelen</span> 1000  (<span class="hljs-title">Local</span> <span class="hljs-title">Loopback</span>)</span><br><span class="hljs-function">        <span class="hljs-title">RX</span> <span class="hljs-title">packets</span> 594219  <span class="hljs-title">bytes</span> 420423978 (420.4 <span class="hljs-title">MB</span>)</span><br><span class="hljs-function">        <span class="hljs-title">RX</span> <span class="hljs-title">errors</span> 0  <span class="hljs-title">dropped</span> 0  <span class="hljs-title">overruns</span> 0  <span class="hljs-title">frame</span> 0</span><br><span class="hljs-function">        <span class="hljs-title">TX</span> <span class="hljs-title">packets</span> 594219  <span class="hljs-title">bytes</span> 420423978 (420.4 <span class="hljs-title">MB</span>)</span><br><span class="hljs-function">        <span class="hljs-title">TX</span> <span class="hljs-title">errors</span> 0  <span class="hljs-title">dropped</span> 0 <span class="hljs-title">overruns</span> 0  <span class="hljs-title">carrier</span> 0  <span class="hljs-title">collisions</span> 0</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux命令</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>命令行</tag>
      
      <tag>Linux命令</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git基础</title>
    <link href="/2024/01/31/Git%E5%91%BD%E4%BB%A4/"/>
    <url>/2024/01/31/Git%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="Git-学习日记"><a href="#Git-学习日记" class="headerlink" title="Git 学习日记"></a>Git 学习日记</h1><hr><h2 id="零、-git底层的数据结构-图"><a href="#零、-git底层的数据结构-图" class="headerlink" title="零、 git底层的数据结构(图)"></a>零、 git底层的数据结构(图)</h2><hr><h2 id="一、-git-工作区"><a href="#一、-git-工作区" class="headerlink" title="一、 git 工作区"></a>一、 git 工作区</h2><p>git的三个区：</p><p>​1.工作区 红色</p><p>​2.暂存区 绿色</p><p>​3.对象区 紫色</p><p>从工作区部署git文档到暂存区：<code>git add</code></p><p>从暂存区部署git文档到对象区：<code>git commit -m &quot;[修改描述]&quot;</code>，-m 添加此次修改描述</p><p>从对象区部署git文档到远程仓库：<code>git push</code></p><hr><h2 id="二、git-config-配置工具"><a href="#二、git-config-配置工具" class="headerlink" title="二、git config 配置工具"></a>二、git config 配置工具</h2><p>命令格式：<code>git config [参数]</code></p><p>常用参数：<code>--system</code> <code>--global</code> <code>--local</code> <code>--list</code> <code>--get</code> <code>--add</code></p><p>Tip：Ubuntu系统自带Git，因此不需要下载，这也就是为什么课上没有下载Git但是可以使用git命令的原因。</p><h3 id="git配置文件参数"><a href="#git配置文件参数" class="headerlink" title="git配置文件参数"></a>git配置文件参数</h3><p>​权限层级：<code>--system</code> <code>--global</code> <code>--local</code></p><p>​1.<code>/etc/gitconfig</code> 文件，下载git时在git安装目录下，这个配置文件包含了Git官方的基本配置信息，也是不做任何修改默认的配置信息。可以通过 <code>--system</code>选项再加上你要读取或修改的<strong>配置项</strong>来让 Git 读写此文件。</p><img src="/2024/01/31/Git%E5%91%BD%E4%BB%A4/image-20240121212450933.png" class=""><p>​2.<code>~/.gitconfig</code> 或 <code>~/.config/git/config</code> 文件：只针对当前用户。 可以通过 <code>--global</code>选项再加上你要读取或修改的配置项来让 Git 读写此文件，这会对你系统上 <strong>所有</strong> 的仓库生效。</p><img src="/2024/01/31/Git%E5%91%BD%E4%BB%A4/image-20240121214244010.png" class=""><p>​3.每个git仓库也自带一个·<code>git/config</code>文件：只针对<strong>当前仓库</strong>生效。可以通过<code>--local</code>选项加上所需要读写的配置项来让Git读写当前配置文件。</p><img src="/2024/01/31/Git%E5%91%BD%E4%BB%A4/image-20240121211702346.png" class=""><p>​每个级别的配置文件回自动覆盖上一级文件的配置信息，即当<strong>当前仓库</strong>配置信息优先级高于<strong>当前用户</strong>的本地配置信息，本地配置信息优先级高于<strong>Git默认的配置信息</strong>，但是不对当前仓库的配置信息进行修改的话，Git会沿用上一级的配置信息。</p><img src="/2024/01/31/Git%E5%91%BD%E4%BB%A4/image-20240121220503060.png" class=""><p>修改配置信息时，如果没有指定修改的配置信息是哪个权级，则会优先修改最近一级的配置信息</p><img src="/2024/01/31/Git%E5%91%BD%E4%BB%A4/image-20240121221619194.png" class=""><h3 id="其他常用参数"><a href="#其他常用参数" class="headerlink" title="其他常用参数"></a>其他常用参数</h3><p>git config –list：查看索引的配置信息</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-function">root@iZbp11t02fism5k702usgjZ:/<span class="hljs-title">home</span>/<span class="hljs-title">TyporaFiles</span>/<span class="hljs-title">TyporaFiles</span>/<span class="hljs-title">typora_files</span># <span class="hljs-title">git</span> <span class="hljs-title">config</span> --<span class="hljs-title">list</span></span><br><span class="hljs-function"><span class="hljs-title">user.email</span>=623945900@<span class="hljs-title">qq.com</span></span><br><span class="hljs-function"><span class="hljs-title">user.name</span>=<span class="hljs-title">BeiShan</span></span><br><span class="hljs-function"><span class="hljs-title">core.repositoryformatversion</span>=0</span><br><span class="hljs-function"><span class="hljs-title">core.filemode</span>=<span class="hljs-title">true</span></span><br><span class="hljs-function"><span class="hljs-title">core.bare</span>=<span class="hljs-title">false</span></span><br><span class="hljs-function"><span class="hljs-title">core.logallrefupdates</span>=<span class="hljs-title">true</span></span><br><span class="hljs-function"><span class="hljs-title">remote.origin.url</span>=<span class="hljs-title">git</span>@<span class="hljs-title">gitee.com:beishan0311</span>/<span class="hljs-title">TyporaFiles.git</span></span><br><span class="hljs-function"><span class="hljs-title">remote.origin.fetch</span>=+<span class="hljs-title">refs</span>/<span class="hljs-title">heads</span>/*:<span class="hljs-title">refs</span>/<span class="hljs-title">remotes</span>/<span class="hljs-title">origin</span>/*</span><br><span class="hljs-function"><span class="hljs-title">branch.master.remote</span>=<span class="hljs-title">origin</span></span><br><span class="hljs-function"><span class="hljs-title">branch.master.merge</span>=<span class="hljs-title">refs</span>/<span class="hljs-title">heads</span>/<span class="hljs-title">master</span></span><br><span class="hljs-function"><span class="hljs-title">root</span>@<span class="hljs-title">iZbp11t02fism5k702usgjZ</span>:/<span class="hljs-title">home</span>/<span class="hljs-title">TyporaFiles</span>/<span class="hljs-title">TyporaFiles</span>/<span class="hljs-title">typora_files</span># </span><br></code></pre></td></tr></table></figure><p>git config –list –show-origin：查看所有的配置信息以及它们所在的文件夹</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-function">root@iZbp11t02fism5k702usgjZ:/<span class="hljs-title">home</span>/<span class="hljs-title">TyporaFiles</span>/<span class="hljs-title">TyporaFiles</span>/<span class="hljs-title">typora_files</span># <span class="hljs-title">git</span> <span class="hljs-title">config</span> --<span class="hljs-title">list</span> --<span class="hljs-title">show</span>-<span class="hljs-title">origin</span></span><br><span class="hljs-function"><span class="hljs-title">file</span>:/<span class="hljs-title">root</span>/.<span class="hljs-title">gitconfig</span>   <span class="hljs-title">user.email</span>=623945900@<span class="hljs-title">qq.com</span></span><br><span class="hljs-function"><span class="hljs-title">file</span>:/<span class="hljs-title">root</span>/.<span class="hljs-title">gitconfig</span>   <span class="hljs-title">user.name</span>=<span class="hljs-title">BeiShan</span></span><br><span class="hljs-function"><span class="hljs-title">file</span>:.<span class="hljs-title">git</span>/<span class="hljs-title">config</span>        <span class="hljs-title">core.repositoryformatversion</span>=0</span><br><span class="hljs-function"><span class="hljs-title">file</span>:.<span class="hljs-title">git</span>/<span class="hljs-title">config</span>        <span class="hljs-title">core.filemode</span>=<span class="hljs-title">true</span></span><br><span class="hljs-function"><span class="hljs-title">file</span>:.<span class="hljs-title">git</span>/<span class="hljs-title">config</span>        <span class="hljs-title">core.bare</span>=<span class="hljs-title">false</span></span><br><span class="hljs-function"><span class="hljs-title">file</span>:.<span class="hljs-title">git</span>/<span class="hljs-title">config</span>        <span class="hljs-title">core.logallrefupdates</span>=<span class="hljs-title">true</span></span><br><span class="hljs-function"><span class="hljs-title">file</span>:.<span class="hljs-title">git</span>/<span class="hljs-title">config</span>        <span class="hljs-title">remote.origin.url</span>=<span class="hljs-title">git</span>@<span class="hljs-title">gitee.com:beishan0311</span>/<span class="hljs-title">TyporaFiles.git</span></span><br><span class="hljs-function"><span class="hljs-title">file</span>:.<span class="hljs-title">git</span>/<span class="hljs-title">config</span>        <span class="hljs-title">remote.origin.fetch</span>=+<span class="hljs-title">refs</span>/<span class="hljs-title">heads</span>/*:<span class="hljs-title">refs</span>/<span class="hljs-title">remotes</span>/<span class="hljs-title">origin</span>/*</span><br><span class="hljs-function"><span class="hljs-title">file</span>:.<span class="hljs-title">git</span>/<span class="hljs-title">config</span>        <span class="hljs-title">branch.master.remote</span>=<span class="hljs-title">origin</span></span><br><span class="hljs-function"><span class="hljs-title">file</span>:.<span class="hljs-title">git</span>/<span class="hljs-title">config</span>        <span class="hljs-title">branch.master.merge</span>=<span class="hljs-title">refs</span>/<span class="hljs-title">heads</span>/<span class="hljs-title">master</span></span><br><span class="hljs-function"><span class="hljs-title">root</span>@<span class="hljs-title">iZbp11t02fism5k702usgjZ</span>:/<span class="hljs-title">home</span>/<span class="hljs-title">TyporaFiles</span>/<span class="hljs-title">TyporaFiles</span>/<span class="hljs-title">typora_files</span># </span><br></code></pre></td></tr></table></figure><hr><h2 id="三、-git-help-获取用户手册"><a href="#三、-git-help-获取用户手册" class="headerlink" title="三、 git help 获取用户手册"></a>三、 git help 获取用户手册</h2><p>命令格式：</p><ol><li><code>git help &lt;变量&gt;</code></li><li><code>git &lt;变量&gt; --help</code></li><li><code>man git--&lt;变量&gt;</code></li><li><code>git &lt;变量&gt; -h</code></li></ol><p>man for manul 用户手册。按Z翻页，Q退出，E换行。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-function">root@iZbp11t02fism5k702usgjZ:/<span class="hljs-title">home</span>/257<span class="hljs-title">class</span>/<span class="hljs-title">BasiC</span>/<span class="hljs-title">BasiC</span>/<span class="hljs-title">variable</span># <span class="hljs-title">git</span> <span class="hljs-title">add</span> -<span class="hljs-title">h</span></span><br><span class="hljs-function"><span class="hljs-title">usage</span>: <span class="hljs-title">git</span> <span class="hljs-title">add</span> [&lt;<span class="hljs-title">options</span>&gt;] [--] &lt;<span class="hljs-title">pathspec</span>&gt;...</span><br><span class="hljs-function"></span><br><span class="hljs-function">    -<span class="hljs-title">n</span>, --<span class="hljs-title">dry</span>-<span class="hljs-title">run</span>         <span class="hljs-title">dry</span> <span class="hljs-title">run</span></span><br><span class="hljs-function">    -<span class="hljs-title">v</span>, --<span class="hljs-title">verbose</span>         <span class="hljs-title">be</span> <span class="hljs-title">verbose</span></span><br><span class="hljs-function"></span><br><span class="hljs-function">    -<span class="hljs-title">i</span>, --<span class="hljs-title">interactive</span>     <span class="hljs-title">interactive</span> <span class="hljs-title">picking</span></span><br><span class="hljs-function">    -<span class="hljs-title">p</span>, --<span class="hljs-title">patch</span>           <span class="hljs-title">select</span> <span class="hljs-title">hunks</span> <span class="hljs-title">interactively</span></span><br><span class="hljs-function">    -<span class="hljs-title">e</span>, --<span class="hljs-title">edit</span>            <span class="hljs-title">edit</span> <span class="hljs-title">current</span> <span class="hljs-title">diff</span> <span class="hljs-title">and</span> <span class="hljs-title">apply</span></span><br><span class="hljs-function">    -<span class="hljs-title">f</span>, --<span class="hljs-title">force</span>           <span class="hljs-title">allow</span> <span class="hljs-title">adding</span> <span class="hljs-title">otherwise</span> <span class="hljs-title">ignored</span> <span class="hljs-title">files</span></span><br><span class="hljs-function">    -<span class="hljs-title">u</span>, --<span class="hljs-title">update</span>          <span class="hljs-title">update</span> <span class="hljs-title">tracked</span> <span class="hljs-title">files</span></span><br><span class="hljs-function">    --<span class="hljs-title">renormalize</span>         <span class="hljs-title">renormalize</span> <span class="hljs-title">EOL</span> <span class="hljs-title">of</span> <span class="hljs-title">tracked</span> <span class="hljs-title">files</span> (<span class="hljs-title">implies</span> -<span class="hljs-title">u</span>)</span><br><span class="hljs-function">    -<span class="hljs-title">N</span>, --<span class="hljs-title">intent</span>-<span class="hljs-title">to</span>-<span class="hljs-title">add</span>   <span class="hljs-title">record</span> <span class="hljs-title">only</span> <span class="hljs-title">the</span> <span class="hljs-title">fact</span> <span class="hljs-title">that</span> <span class="hljs-title">the</span> <span class="hljs-title">path</span> <span class="hljs-title">will</span> <span class="hljs-title">be</span> <span class="hljs-title">added</span> <span class="hljs-title">later</span></span><br><span class="hljs-function">    -<span class="hljs-title">A</span>, --<span class="hljs-title">all</span>             <span class="hljs-title">add</span> <span class="hljs-title">changes</span> <span class="hljs-title">from</span> <span class="hljs-title">all</span> <span class="hljs-title">tracked</span> <span class="hljs-title">and</span> <span class="hljs-title">untracked</span> <span class="hljs-title">files</span></span><br><span class="hljs-function">    --<span class="hljs-title">ignore</span>-<span class="hljs-title">removal</span>      <span class="hljs-title">ignore</span> <span class="hljs-title">paths</span> <span class="hljs-title">removed</span> <span class="hljs-title">in</span> <span class="hljs-title">the</span> <span class="hljs-title">working</span> <span class="hljs-title">tree</span> (<span class="hljs-title">same</span> <span class="hljs-title">as</span> --<span class="hljs-title">no</span>-<span class="hljs-title">all</span>)</span><br><span class="hljs-function">    --<span class="hljs-title">refresh</span>             <span class="hljs-title">don</span>&#x27;<span class="hljs-title">t</span> <span class="hljs-title">add</span>, <span class="hljs-title">only</span> <span class="hljs-title">refresh</span> <span class="hljs-title">the</span> <span class="hljs-title">index</span></span><br><span class="hljs-function">    --<span class="hljs-title">ignore</span>-<span class="hljs-title">errors</span>       <span class="hljs-title">just</span> <span class="hljs-title">skip</span> <span class="hljs-title">files</span> <span class="hljs-title">which</span> <span class="hljs-title">cannot</span> <span class="hljs-title">be</span> <span class="hljs-title">added</span> <span class="hljs-title">because</span> <span class="hljs-title">of</span> <span class="hljs-title">errors</span></span><br><span class="hljs-function">    --<span class="hljs-title">ignore</span>-<span class="hljs-title">missing</span>      <span class="hljs-title">check</span> <span class="hljs-title">if</span> - <span class="hljs-title">even</span> <span class="hljs-title">missing</span> - <span class="hljs-title">files</span> <span class="hljs-title">are</span> <span class="hljs-title">ignored</span> <span class="hljs-title">in</span> <span class="hljs-title">dry</span> <span class="hljs-title">run</span></span><br><span class="hljs-function">    --<span class="hljs-title">sparse</span>              <span class="hljs-title">allow</span> <span class="hljs-title">updating</span> <span class="hljs-title">entries</span> <span class="hljs-title">outside</span> <span class="hljs-title">of</span> <span class="hljs-title">the</span> <span class="hljs-title">sparse</span>-<span class="hljs-title">checkout</span> <span class="hljs-title">cone</span></span><br><span class="hljs-function">    --<span class="hljs-title">chmod</span> (+|-)<span class="hljs-title">x</span>        <span class="hljs-title">override</span> <span class="hljs-title">the</span> <span class="hljs-title">executable</span> <span class="hljs-title">bit</span> <span class="hljs-title">of</span> <span class="hljs-title">the</span> <span class="hljs-title">listed</span> <span class="hljs-title">files</span></span><br><span class="hljs-function">    --<span class="hljs-title">pathspec</span>-<span class="hljs-title">from</span>-<span class="hljs-title">file</span> &lt;<span class="hljs-title">file</span>&gt;</span><br><span class="hljs-function">                          <span class="hljs-title">read</span> <span class="hljs-title">pathspec</span> <span class="hljs-title">from</span> <span class="hljs-title">file</span></span><br><span class="hljs-function">    --<span class="hljs-title">pathspec</span>-<span class="hljs-title">file</span>-<span class="hljs-title">nul</span>   <span class="hljs-title">with</span> --<span class="hljs-title">pathspec</span>-<span class="hljs-title">from</span>-<span class="hljs-title">file</span>, <span class="hljs-title">pathspec</span> <span class="hljs-title">elements</span> <span class="hljs-title">are</span> <span class="hljs-title">separated</span> <span class="hljs-title">with</span> <span class="hljs-title">NUL</span> <span class="hljs-title">character</span></span><br><span class="hljs-function"></span><br><span class="hljs-function"><span class="hljs-title">root</span>@<span class="hljs-title">iZbp11t02fism5k702usgjZ</span>:/<span class="hljs-title">home</span>/257<span class="hljs-title">class</span>/<span class="hljs-title">BasiC</span>/<span class="hljs-title">BasiC</span>/<span class="hljs-title">variable</span># </span><br></code></pre></td></tr></table></figure><hr><h2 id="四、git-init、add、status、commit、push、clone、switch、log"><a href="#四、git-init、add、status、commit、push、clone、switch、log" class="headerlink" title="四、git init、add、status、commit、push、clone、switch、log"></a>四、git init、add、status、commit、push、clone、switch、log</h2><h3 id="git-init-初始化git仓库"><a href="#git-init-初始化git仓库" class="headerlink" title="git init 初始化git仓库"></a>git init 初始化git仓库</h3><p>命令格式：git init</p><p>命令参数：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-built_in">cd</span> /home<br><span class="hljs-built_in">mkdir</span> my_workplace<br><span class="hljs-built_in">cd</span> /my_workplace<br>git init<br></code></pre></td></tr></table></figure><p>Tip：<code>git init</code> 只能在一个空目录下创建git仓库。</p><p>执行完上述命令，就完成了在本地&#x2F;云服务器创建了一个git仓库，这个文件夹下默认包含一个.<code>git</code>文件夹，可以使用<code>ls -alh</code>命令查看。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-function">root@iZbp11t02fism5k702usgjZ:/<span class="hljs-title">home</span>/257<span class="hljs-title">class</span>/<span class="hljs-title">BasiC</span>/<span class="hljs-title">BasiC</span>/<span class="hljs-title">variable</span># <span class="hljs-title">cd</span> /<span class="hljs-title">home</span></span><br><span class="hljs-function"><span class="hljs-title">root</span>@<span class="hljs-title">iZbp11t02fism5k702usgjZ</span>:/<span class="hljs-title">home</span># <span class="hljs-title">mkdir</span> <span class="hljs-title">my_workplace</span></span><br><span class="hljs-function"><span class="hljs-title">root</span>@<span class="hljs-title">iZbp11t02fism5k702usgjZ</span>:/<span class="hljs-title">home</span># <span class="hljs-title">cd</span> <span class="hljs-title">my_workplace</span></span><br><span class="hljs-function"><span class="hljs-title">root</span>@<span class="hljs-title">iZbp11t02fism5k702usgjZ</span>:/<span class="hljs-title">home</span>/<span class="hljs-title">my_workplace</span># <span class="hljs-title">ls</span> -<span class="hljs-title">alh</span></span><br><span class="hljs-function"><span class="hljs-title">total</span> 8.0<span class="hljs-title">K</span></span><br><span class="hljs-function"><span class="hljs-title">drwxr</span>-<span class="hljs-title">xr</span>-<span class="hljs-title">x</span> 2 <span class="hljs-title">root</span> <span class="hljs-title">root</span> 4.0<span class="hljs-title">K</span> <span class="hljs-title">Jan</span> 22 09:09 .</span><br><span class="hljs-function"><span class="hljs-title">drwxr</span>-<span class="hljs-title">xr</span>-<span class="hljs-title">x</span> 5 <span class="hljs-title">root</span> <span class="hljs-title">root</span> 4.0<span class="hljs-title">K</span> <span class="hljs-title">Jan</span> 22 09:09 ..</span><br><span class="hljs-function"><span class="hljs-title">root</span>@<span class="hljs-title">iZbp11t02fism5k702usgjZ</span>:/<span class="hljs-title">home</span>/<span class="hljs-title">my_workplace</span># <span class="hljs-title">git</span> <span class="hljs-title">init</span></span><br><span class="hljs-function"><span class="hljs-title">hint</span>: <span class="hljs-title">Using</span> &#x27;<span class="hljs-title">master</span>&#x27; <span class="hljs-title">as</span> <span class="hljs-title">the</span> <span class="hljs-title">name</span> <span class="hljs-title">for</span> <span class="hljs-title">the</span> <span class="hljs-title">initial</span> <span class="hljs-title">branch</span>. <span class="hljs-title">This</span> <span class="hljs-title">default</span> <span class="hljs-title">branch</span> <span class="hljs-title">name</span></span><br><span class="hljs-function"><span class="hljs-title">hint</span>: <span class="hljs-title">is</span> <span class="hljs-title">subject</span> <span class="hljs-title">to</span> <span class="hljs-title">change</span>. <span class="hljs-title">To</span> <span class="hljs-title">configure</span> <span class="hljs-title">the</span> <span class="hljs-title">initial</span> <span class="hljs-title">branch</span> <span class="hljs-title">name</span> <span class="hljs-title">to</span> <span class="hljs-title">use</span> <span class="hljs-title">in</span> <span class="hljs-title">all</span></span><br><span class="hljs-function"><span class="hljs-title">hint</span>: <span class="hljs-title">of</span> <span class="hljs-title">your</span> <span class="hljs-title">new</span> <span class="hljs-title">repositories</span>, <span class="hljs-title">which</span> <span class="hljs-title">will</span> <span class="hljs-title">suppress</span> <span class="hljs-title">this</span> <span class="hljs-title">warning</span>, <span class="hljs-title">call</span>:</span><br><span class="hljs-function"><span class="hljs-title">hint</span>: </span><br><span class="hljs-function"><span class="hljs-title">hint</span>:   <span class="hljs-title">git</span> <span class="hljs-title">config</span> --<span class="hljs-title">global</span> <span class="hljs-title">init.defaultBranch</span> &lt;<span class="hljs-title">name</span>&gt;</span><br><span class="hljs-function"><span class="hljs-title">hint</span>: </span><br><span class="hljs-function"><span class="hljs-title">hint</span>: <span class="hljs-title">Names</span> <span class="hljs-title">commonly</span> <span class="hljs-title">chosen</span> <span class="hljs-title">instead</span> <span class="hljs-title">of</span> &#x27;<span class="hljs-title">master</span>&#x27; <span class="hljs-title">are</span> &#x27;<span class="hljs-title">main</span>&#x27;, &#x27;<span class="hljs-title">trunk</span>&#x27; <span class="hljs-title">and</span></span><br><span class="hljs-function"><span class="hljs-title">hint</span>: &#x27;<span class="hljs-title">development</span>&#x27;. <span class="hljs-title">The</span> <span class="hljs-title">just</span>-<span class="hljs-title">created</span> <span class="hljs-title">branch</span> <span class="hljs-title">can</span> <span class="hljs-title">be</span> <span class="hljs-title">renamed</span> <span class="hljs-title">via</span> <span class="hljs-title">this</span> <span class="hljs-title">command</span>:</span><br><span class="hljs-function"><span class="hljs-title">hint</span>: </span><br><span class="hljs-function"><span class="hljs-title">hint</span>:   <span class="hljs-title">git</span> <span class="hljs-title">branch</span> -<span class="hljs-title">m</span> &lt;<span class="hljs-title">name</span>&gt;</span><br><span class="hljs-function"><span class="hljs-title">Initialized</span> <span class="hljs-title">empty</span> <span class="hljs-title">Git</span> <span class="hljs-title">repository</span> <span class="hljs-title">in</span> /<span class="hljs-title">home</span>/<span class="hljs-title">my_workplace</span>/.<span class="hljs-title">git</span>/</span><br><span class="hljs-function"><span class="hljs-title">root</span>@<span class="hljs-title">iZbp11t02fism5k702usgjZ</span>:/<span class="hljs-title">home</span>/<span class="hljs-title">my_workplace</span># <span class="hljs-title">ls</span> -<span class="hljs-title">alh</span></span><br><span class="hljs-function"><span class="hljs-title">total</span> 12<span class="hljs-title">K</span></span><br><span class="hljs-function"><span class="hljs-title">drwxr</span>-<span class="hljs-title">xr</span>-<span class="hljs-title">x</span> 3 <span class="hljs-title">root</span> <span class="hljs-title">root</span> 4.0<span class="hljs-title">K</span> <span class="hljs-title">Jan</span> 22 09:09 .</span><br><span class="hljs-function"><span class="hljs-title">drwxr</span>-<span class="hljs-title">xr</span>-<span class="hljs-title">x</span> 5 <span class="hljs-title">root</span> <span class="hljs-title">root</span> 4.0<span class="hljs-title">K</span> <span class="hljs-title">Jan</span> 22 09:09 ..</span><br><span class="hljs-function"><span class="hljs-title">drwxr</span>-<span class="hljs-title">xr</span>-<span class="hljs-title">x</span> 7 <span class="hljs-title">root</span> <span class="hljs-title">root</span> 4.0<span class="hljs-title">K</span> <span class="hljs-title">Jan</span> 22 09:09 .<span class="hljs-title">git</span></span><br><span class="hljs-function"><span class="hljs-title">root</span>@<span class="hljs-title">iZbp11t02fism5k702usgjZ</span>:/<span class="hljs-title">home</span>/<span class="hljs-title">my_workplace</span># </span><br></code></pre></td></tr></table></figure><p>使用<code>ls -alh</code>查看当前文件夹下的所有目录与文件，</p><p>**ls for list directory contents **列出当前目录下包含的所有目录和文件；</p><p>alh：a显示当前工作目录下的所有文件和目录，包括隐藏的文件；</p><p>​lh以一种可读的方式显示所有的文件和目录大小。</p><p><code>.</code>表示当前目录；</p><p><code>..</code>表示上一级目录；</p><p><code>d</code>前缀表示当前文件是一个目录；</p><p><code>rw</code> for Read and Write，表示当前文件是一个可读写的文件。</p><img src="/2024/01/31/Git%E5%91%BD%E4%BB%A4/image-20240122091055610.png" class=""><h3 id="git-add-将文件从工作区添加到暂存区"><a href="#git-add-将文件从工作区添加到暂存区" class="headerlink" title="git add 将文件从工作区添加到暂存区"></a>git add 将文件从工作区添加到暂存区</h3><p>命令格式：</p><ol><li><code>git add [文件名1] [文件名2] ...</code> 添加一个或多个文件到暂存区；</li><li><code>git add [目录]</code> 添加指定目录下的所有子文件到暂存区；</li><li><code>git add .</code> 添加当前工作目录下的所有子文件到暂存区。</li></ol><p>命令参数：</p><ol><li><code>.</code> 提交当前工作目录的所有文件到暂存区，包括新文件<code>new</code>和被修改的文件<code>modified</code>，但不包括被删除<code>deleted</code>的文件；</li><li><code>-A</code> 提交当前工作目录的所有变化到暂存区，包括新建<code>new</code>，删除<code>deleted</code>和修改<code>modified</code>；</li><li><code>-u</code> 提交被修改&#96;&#96;modified<code>和被删除</code>deleted<code>的文件到暂存区，不包括新文件</code>new&#96;。</li></ol><p>git仓库文件状态：</p><ul><li><code>U</code> Untracked，文件在本地创建，未同步到云端；</li><li><code>M</code> Modified，文件在本地修改，未同步到云端；</li><li><code>D</code> Deleted，文件已删除；</li><li><code>A</code> Added，文件已被添加到暂存区；</li></ul><h3 id="git-status-查看当前文件状态"><a href="#git-status-查看当前文件状态" class="headerlink" title="git status 查看当前文件状态"></a>git status 查看当前文件状态</h3><p>命令格式：<code>git status</code></p><p>命令参数：</p><img src="/2024/01/31/Git%E5%91%BD%E4%BB%A4/image-20240122095808331.png" class=""><h3 id="git-commit-提交暂存区文件到对象区"><a href="#git-commit-提交暂存区文件到对象区" class="headerlink" title="git commit 提交暂存区文件到对象区"></a>git commit 提交暂存区文件到对象区</h3><p>命令格式：<code>git commit [file1] [file2] ... -m [message]</code></p><p>命令参数：<code>-m</code> <code>-am</code> <code>-amemd</code></p><ul><li><code>[message]</code> 保存此次修改描述信息；</li><li><code>-am</code> 跳过git add 直接提交工作内容；</li><li><code>-amend</code> 当开发过程中备注信息填写错误时，可以使用 <code>git commit -amend -m [message]</code> 修改备注信息。</li></ul><img src="/2024/01/31/Git%E5%91%BD%E4%BB%A4/image-20240122101622967.png" class=""><img src="/2024/01/31/Git%E5%91%BD%E4%BB%A4/image-20240122101705848.png" class=""><h3 id="git-push-提交本地工程到git远程仓库"><a href="#git-push-提交本地工程到git远程仓库" class="headerlink" title="git push 提交本地工程到git远程仓库"></a>git push 提交本地工程到git远程仓库</h3><p>命令格式：<code>git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;</code></p><p>命令参数：<code>--force</code></p><p>实现将本地工程上传到远程并合并，默认的远程分支名为master，可以使用<code>git config</code>命令修改默认的分支名。</p><p>如果本地分支与远程分支存在差异，可以使用<code>--force</code>强制上传。</p><h3 id="git-clone-克隆远程仓库"><a href="#git-clone-克隆远程仓库" class="headerlink" title="git clone 克隆远程仓库"></a>git clone 克隆远程仓库</h3><p>命令格式：<code>git clone [url]</code></p><p>常用参数：</p><p>用于克隆（clone）远程 Git 仓库的所有分支和历史记录到本地。</p><p>url：需要拷贝的项目路径。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cmd">$ git clone git@gitee.com:beishan0311/BasiC.git<br>Cloning into &#x27;runoob-git-test&#x27;...<br><span class="hljs-function">remote: <span class="hljs-title">Enumerating</span> <span class="hljs-title">objects</span>: 12, <span class="hljs-title">done</span>.</span><br><span class="hljs-function"><span class="hljs-title">remote</span>: <span class="hljs-title">Total</span> 12 (<span class="hljs-title">delta</span> 0), <span class="hljs-title">reused</span> 0 (<span class="hljs-title">delta</span> 0), <span class="hljs-title">pack</span>-<span class="hljs-title">reused</span> 12</span><br><span class="hljs-function"><span class="hljs-title">Unpacking</span> <span class="hljs-title">objects</span>: 100% (12/12), <span class="hljs-title">done</span>.</span><br></code></pre></td></tr></table></figure><h3 id="git-reset-版本回退"><a href="#git-reset-版本回退" class="headerlink" title="git reset 版本回退"></a>git reset 版本回退</h3><p>命令格式：<code>git reset [--soft | --mixed | --hard] [回退版本]</code></p><p>命令参数：</p><ul><li><p><code>--mixed</code> 为默认参数，用于重置暂存区的文件与上一次的提交(commit)保持一致，工作区文件内容保持不变。</p></li><li><p><code>--soft</code> 用于回退到某个版本。</p></li><li><p><code>--hard</code> 参数撤销工作区中所有未提交的修改内容，将暂存区与工作区都回到上一次版本，并删除之前的所有信息提交。</p></li><li><p>回退版本</p><ul><li>HEAD 表示当前版本。</li><li>HEAD^ 上一个版本。</li><li>HEAD^^ 上上一个版本。</li><li>HEAD^^^ 上上上一个版本。</li><li>……</li></ul><p>或者</p><ul><li>HEAD~0 表示当前版本</li><li>HEAD~1 上一个版本</li><li>HEAD^2 上上一个版本</li><li>HEAD^3 上上上一个版本</li><li>……</li></ul><p>或者使用版本号<code>commitid</code> 进行版本回退：</p><img src="/2024/01/31/Git%E5%91%BD%E4%BB%A4/image-20240122104305662.png" class=""></li></ul><h3 id="git-log-查看历史提交记录"><a href="#git-log-查看历史提交记录" class="headerlink" title="git log 查看历史提交记录"></a>git log 查看历史提交记录</h3><p>命令格式：<code>git log [选项] [分支名]</code></p><p>命令参数：</p><ul><li><code>-p</code>：显示提交的补丁（具体更改内容）。</li><li><code>--oneline</code>：以简洁的一行格式显示提交信息。</li><li><code>--graph</code>：以图形化方式显示分支和合并历史。</li><li><code>--decorate</code>：显示分支和标签指向的提交。</li><li><code>--author=&lt;作者&gt;</code>：只显示特定作者的提交。</li><li><code>--since=&lt;时间&gt;</code>：只显示指定时间之后的提交。</li><li><code>--until=&lt;时间&gt;</code>：只显示指定时间之前的提交。</li><li><code>--grep=&lt;模式&gt;</code>：只显示包含指定模式的提交消息。</li><li><code>--no-merges</code>：不显示合并提交。</li><li><code>--stat</code>：显示简略统计信息，包括修改的文件和行数。</li><li><code>--abbrev-commit</code>：使用短提交哈希值。</li><li><code>--pretty=&lt;格式&gt;</code>：使用自定义的提交信息显示格式。</li></ul>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Git</tag>
      
      <tag>SSH</tag>
      
      <tag>Gitee</tag>
      
      <tag>Github</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>云服务器+gitee仓库远程连接</title>
    <link href="/2024/01/31/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8-gitee%E4%BB%93%E5%BA%93%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/"/>
    <url>/2024/01/31/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8-gitee%E4%BB%93%E5%BA%93%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="云服务器-gitee部署工作区及Git基础"><a href="#云服务器-gitee部署工作区及Git基础" class="headerlink" title="云服务器+gitee部署工作区及Git基础"></a>云服务器+gitee部署工作区及Git基础</h1><h2 id="一、搭建云服务器-虚拟机-以云服务器为例"><a href="#一、搭建云服务器-虚拟机-以云服务器为例" class="headerlink" title="一、搭建云服务器&#x2F;虚拟机(以云服务器为例)"></a>一、搭建云服务器&#x2F;虚拟机(以云服务器为例)</h2><p>进入阿里云官网 <code>https://cn.aliyun.com/ </code></p><p>点击免费试用，进入云服务器 ECS试用。</p><img src="/2024/01/31/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8-gitee%E4%BB%93%E5%BA%93%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/image-20240121185806063.png" class=""><p>产品规格选择1核2GB内存，操作系统选择<code>Ubuntu</code>。</p><img src="/2024/01/31/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8-gitee%E4%BB%93%E5%BA%93%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/image-20240121190310603.png" class=""><p>完成云服务器创建后，点击前往控制台，进入云服务器管理控制台，点击实例查看当前创建的服务器。</p><img src="/2024/01/31/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8-gitee%E4%BB%93%E5%BA%93%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/image-20240121190704825.png" class=""><p>按上述步骤，重置实例密码后点击远程连接-&gt;立即登录进入服务器终端窗口。</p><p>这样就搭建完了一个基础的阿里云服务器。</p><hr><h2 id="二、-获取服务器公钥"><a href="#二、-获取服务器公钥" class="headerlink" title="二、 获取服务器公钥"></a>二、 获取服务器公钥</h2><p>输入<code>ssh-keygen</code>获取ssh公钥</p><p>因为ssh协议是加密协议，发送和接收的数据都需要通过本地的ssh公钥进行加密和解密。并且为了安全考虑，防止数据在发送过程中被他人获取解密，ssh协议传输数据时不会发送公钥，而是在第一次进行连接时就将公钥保存到本地，后续的收发操作只需要在本地使用公钥加密后，将加密后的秘文发送到网络上即可。</p><p>输入ssh-keygen命令就是使用ssh协议进行第一次连接的过程，秘钥文件会被保存到用户工作目录下的.ssh文件夹下。</p><img src="/2024/01/31/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8-gitee%E4%BB%93%E5%BA%93%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/image-20240121191554624.png" class=""><p>输入 <code>cd ~/.ssh/</code> 进入.ssh文件夹。</p><p>输入 <code>cat id_rsa.pub</code> 查看ssh公钥，并将公钥内容复制下来。</p><img src="/2024/01/31/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8-gitee%E4%BB%93%E5%BA%93%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/image-20240121191814754.png" class=""><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cmd">ssh-keygen<br><span class="hljs-built_in">cd</span> ~/.ssh/<br>cat id_rsa.pub<br></code></pre></td></tr></table></figure><hr><h2 id="三、-部署git仓库到云服务器上"><a href="#三、-部署git仓库到云服务器上" class="headerlink" title="三、 部署git仓库到云服务器上"></a>三、 部署git仓库到云服务器上</h2><p>进入gitee官网，点击账号设置下的ssh公钥界面，将复制的ssh公钥粘贴到下方并设置公钥名称。</p><img src="/2024/01/31/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8-gitee%E4%BB%93%E5%BA%93%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/image-20240121192143680.png" class=""><img src="/2024/01/31/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8-gitee%E4%BB%93%E5%BA%93%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/image-20240121192249155.png" class=""><p>这样就将公钥部署到了git上，以后就可以使用git进行数据的传送和接收了。</p><hr><h2 id="四、-新建仓库"><a href="#四、-新建仓库" class="headerlink" title="四、 新建仓库"></a>四、 新建仓库</h2><p>点击右上角加号新建仓库，根据你的需要设置仓库名称和路径，并初始化你的仓库。</p><p>值得注意的是，你的仓库名称和路径名称是接下来你呀创建的工作目录的路径并且仓库路径的下一级才是你的工作目录，因此有必要对仓库名称和路径名称做个性化的更改，防止后续操作的问题。</p><p><code>../仓库名称/路径名称/工作目录</code></p><img src="/2024/01/31/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8-gitee%E4%BB%93%E5%BA%93%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/image-20240121192510402.png" class=""><img src="/2024/01/31/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8-gitee%E4%BB%93%E5%BA%93%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/image-20240121192702942.png" class=""><p>复制你的域名(推荐选择ssh协议)。</p><img src="/2024/01/31/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8-gitee%E4%BB%93%E5%BA%93%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/image-20240121193305031.png" class=""><hr><h2 id="五、部署git仓库到云服务器"><a href="#五、部署git仓库到云服务器" class="headerlink" title="五、部署git仓库到云服务器"></a>五、部署git仓库到云服务器</h2><p>执行 <code>cd /home</code>并在当前目录创建一个你未来需要经常使用的工作文件夹，这里以TyporaFiles为例。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /home<br><span class="hljs-built_in">mkdir</span> TyporaFile<br><span class="hljs-built_in">cd</span> TyporaFile<br>git <span class="hljs-built_in">clone</span> [上一步复制的域名]<br></code></pre></td></tr></table></figure><p>等待项目部署完成即可，这样你就将你的工作仓库部署到云服务器上了。</p><hr><h2 id="六、-使用VSCode远程连接云服务器"><a href="#六、-使用VSCode远程连接云服务器" class="headerlink" title="六、 使用VSCode远程连接云服务器"></a>六、 使用VSCode远程连接云服务器</h2><p>打开VSCode，下载<code>Remote - ssh</code>远程连接拓展</p><img src="/2024/01/31/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8-gitee%E4%BB%93%E5%BA%93%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/image-20240121195508974.png" class=""><p>下载完成后，点击左下角进行远程连接，选择连接到主机。</p><img src="/2024/01/31/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8-gitee%E4%BB%93%E5%BA%93%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/image-20240121195742970.png" class=""><p>在上方输入 <code>root@[你的云服务器IP地址]</code>  ，并输入密码进行连接。</p><img src="/2024/01/31/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8-gitee%E4%BB%93%E5%BA%93%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/image-20240121200101008.png" class=""><p>连接完成后选择打开文件夹，进入&#x2F;home文件夹，再次输入密码，这样你就完成了部署git仓库到VSCode的全部操作。</p><hr><h2 id="七、-提交本地工程到服务器"><a href="#七、-提交本地工程到服务器" class="headerlink" title="七、 提交本地工程到服务器"></a>七、 提交本地工程到服务器</h2><p>在提交文件之前，需要进行个人信息配置以确保当前文档的提交人是你。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmd">git config --global user.email &quot;你的邮箱&quot;<br>git config --global user.name &quot;你的用户名&quot;<br></code></pre></td></tr></table></figure><p>当你完成了你的工作并想把工作文件提交到git仓库时，右键选择你所需要的提交的工程文件所在的文件夹，点击在集成终端中打开。</p><img src="/2024/01/31/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8-gitee%E4%BB%93%E5%BA%93%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/image-20240121200936904.png" class=""><p>在下方打开的终端中输入：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cmd">git add zuoye.c<br>git commit -m &quot;提交文档的日志信息&quot;<br>git push<br>git status <br></code></pre></td></tr></table></figure><p><code>git add [文件名]</code>，将工作区文件添加到暂存区。</p><p><code>git commit -m</code> ，将暂存区文档部署git到对象区。</p><p><code>git push</code> ，将本地对象区文档部署到git仓库。</p><p><code>git status</code> ，查看当前目录下的文件所在的git分区。</p><img src="/2024/01/31/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8-gitee%E4%BB%93%E5%BA%93%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/image-20240121201855324.png" class=""><p>当你发现 <code>git commit -m &quot;提交文档的日志信息&quot;</code> 的文档信息有误时，可以使用 <code>git commit amend -m &quot;修改描述&quot;</code> 修改你的描述信息。</p><p>当发现提交的文档有误时，可以使用 git log 查询你所需要回退的版本ID，并使用 <code>git reset --hard  +  git push -f &quot;commitid&quot;</code> 回退到你所需要的版本</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cmd">git log <br>git commit amend -m &quot;修改描述&quot;<br>git reset --hard  +  git push -f &quot;版本回退id&quot;<br></code></pre></td></tr></table></figure><img src="/2024/01/31/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8-gitee%E4%BB%93%E5%BA%93%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/image-20240121202313321.png" class=""><hr><h2 id="八、-配置云服务器安全组"><a href="#八、-配置云服务器安全组" class="headerlink" title="八、 配置云服务器安全组"></a>八、 配置云服务器安全组</h2><img src="/2024/01/31/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8-gitee%E4%BB%93%E5%BA%93%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/image.png" class="">]]></content>
    
    
    <categories>
      
      <category>云服务器+Git部署工作区</category>
      
    </categories>
    
    
    <tags>
      
      <tag>云服务器</tag>
      
      <tag>Git</tag>
      
      <tag>SSH</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C语言关键字</title>
    <link href="/2024/01/31/C%E8%AF%AD%E8%A8%80%E5%85%B3%E9%94%AE%E5%AD%97/"/>
    <url>/2024/01/31/C%E8%AF%AD%E8%A8%80%E5%85%B3%E9%94%AE%E5%AD%97/</url>
    
    <content type="html"><![CDATA[<h1 id="C语言的32个关键字"><a href="#C语言的32个关键字" class="headerlink" title="C语言的32个关键字"></a>C语言的32个关键字</h1><h2 id="一、数据类型关键字"><a href="#一、数据类型关键字" class="headerlink" title="一、数据类型关键字"></a><strong>一、数据类型关键字</strong></h2><h4 id="A基本数据类型（5个）"><a href="#A基本数据类型（5个）" class="headerlink" title="A基本数据类型（5个）"></a><strong>A基本数据类型（5个）</strong></h4><ul><li><code>void</code>：声明函数无返回值或无参数，声明无类型指针，显式丢弃运算结果</li><li><code>char</code>：字符型类型数据，属于整型数据的一种</li><li><code>int</code>：整型数据，通常为编译器指定的机器字长</li><li><code>float</code>：单精度浮点型数据，属于浮点数据的一种</li><li><code>double</code>：双精度浮点型数据，属于浮点数据的一种</li></ul><h4 id="B类型修饰关键字（4个）"><a href="#B类型修饰关键字（4个）" class="headerlink" title="B类型修饰关键字（4个）"></a><strong>B类型修饰关键字（4个）</strong></h4><ul><li><code>short</code>：修饰int，短整型数据，可省略被修饰的int。</li><li><code>long</code>：修饰int，长整形数据，可省略被修饰的int。</li><li><code>signed</code>：修饰整型数据，有符号数据类型</li><li><code>unsigned</code>：修饰整型数据，无符号数据类型</li></ul><h4 id="C复杂类型关键字（5个）"><a href="#C复杂类型关键字（5个）" class="headerlink" title="C复杂类型关键字（5个）"></a><strong>C复杂类型关键字（5个）</strong></h4><ul><li><code>struct</code>：结构体声明</li><li><code>union</code>：共用体声明</li><li><code>enum</code>：枚举声明</li><li><code>typedef</code>：声明类型别名</li><li><code>sizeof</code>：得到特定类型或特定类型变量的大小</li></ul><h4 id="D存储级别关键字（6个）"><a href="#D存储级别关键字（6个）" class="headerlink" title="D存储级别关键字（6个）"></a><strong>D存储级别关键字（6个）</strong></h4><ul><li><p><code>auto</code>：指定为自动变量，由编译器自动分配及释放。通常在栈上分配</p></li><li><p><code>static</code>：指定为静态变量，分配在静态变量区，修饰函数时，指定函数作用域为文件内部</p></li><li><p><code>register</code>：指定为寄存器变量，建议编译器将变量存储到寄存器中使用，也可以修饰函数形参，建议编译器通过寄存器而不是堆栈传递参数</p></li><li><p><code>extern</code>：指定对应变量为外部变量，即在另外的目标文件中定义，可以认为是约定由另外文件声明的对象的一个“引用“</p></li><li><p><code>const</code>：与<code>volatile</code>合称<code>cv特性</code>，指定变量不可被当前线程&#x2F;进程改变（但有可能被系统或其他线程&#x2F;进程改变）</p></li><li><p><code>volatile</code>：与<code>const</code>合称“<code>cv特性</code>，指定变量的值有可能会被系统或其他进程&#x2F;线程改变，强制编译器每次从内存中取得该变量的值</p></li></ul><h2 id="二、流程控制关键字"><a href="#二、流程控制关键字" class="headerlink" title="二、流程控制关键字"></a><strong>二、流程控制关键字</strong></h2><h4 id="A跳转结构（4个）"><a href="#A跳转结构（4个）" class="headerlink" title="A跳转结构（4个）"></a><strong>A跳转结构（4个）</strong></h4><ul><li><code>return</code>：用在函数体中，返回特定值（或者是void值，即不返回值）</li><li><code>continue</code>：结束当前循环，开始下一轮循环</li><li><code>break</code>：跳出当前循环或switch结构</li><li><code>goto</code>：无条件跳转语句</li></ul><h4 id="B分支结构（5个）"><a href="#B分支结构（5个）" class="headerlink" title="B分支结构（5个）"></a><strong>B分支结构（5个）</strong></h4><ul><li><code>if</code>：条件语句</li><li><code>else</code>：条件语句否定分支（与if连用）</li><li><code>switch</code>：开关语句（多重分支语句）</li><li><code>case</code>：开关语句中的分支标记</li><li><code>default</code>：开关语句中的“其他”分治，可选。</li></ul><h4 id="C循环结构（3个）"><a href="#C循环结构（3个）" class="headerlink" title="C循环结构（3个）"></a><strong>C循环结构（3个）</strong></h4><ul><li><code>for</code>：for循环结构，for(1;2;3)4;的执行顺序为1-&gt;2-&gt;4-&gt;3-&gt;2…循环，其中2为循环条件</li><li><code>do</code>：do循环结构，do 1 while(2);的执行顺序是1-&gt;2-&gt;1…循环，2为循环条件</li><li><code>while</code>：while循环结构，while(1) 2;的执行顺序是1-&gt;2-&gt;1…循环，1为循环条件</li></ul>]]></content>
    
    
    <categories>
      
      <category>从C语言入门到C++精通</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C语言</tag>
      
      <tag>编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C语言基础</title>
    <link href="/2024/01/28/C%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
    <url>/2024/01/28/C%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="C语言基础"><a href="#C语言基础" class="headerlink" title="C语言基础"></a>C语言基础</h1><h2 id="0-变量命名"><a href="#0-变量命名" class="headerlink" title="0. 变量命名"></a>0. 变量命名</h2><p>C语言变量命名规则</p><ol><li><p>以字母或者下划线开始</p></li><li><p>由数字 字母 下划线组成</p></li><li><p>不能与C语言关键字相冲突</p><p><strong>附.<a href="http://beishan.online/2024/01/31/C%E8%AF%AD%E8%A8%80%E5%85%B3%E9%94%AE%E5%AD%97/">C语言关键字</a></strong></p></li></ol><p>变量命名的原则</p><ul><li>见名知意</li></ul><hr><h2 id="1-C语言基本数据类型"><a href="#1-C语言基本数据类型" class="headerlink" title="1. C语言基本数据类型"></a>1. C语言基本数据类型</h2><p><strong>计算机内存</strong></p><ul><li>一个字节(bytes) &#x3D; 8位(bits) <code>无符号</code>：<strong>0~255</strong> <code>有符号</code>：**-128~127。**</li><li>一个字节表示的数的最小值：0000 0000 for 0  means 0。</li><li>一个字节表示的数的最大值：1111 1111 for 255 means 2 ^ 8 - 1。</li><li>两个字节(bytes) &#x3D; 16位(bits) <code>无符号</code>：<strong>0-65535</strong> <code>有符号</code> ：**-32768~32767。**</li><li>两个字节表示的数的最小值：0000 0000 0000 0000 for 0   means 0。</li><li>两个字节表示的数的最大值：1111 1111 1111 1111 for 65535 means 2 ^ 16 - 1。</li><li>四个字节(bytes) &#x3D; 32位(bits) <code>无符号</code>：<strong>0~4294967295</strong> <code>有符号</code> <strong>-2147483648~2147483647。</strong></li><li>四个字节表示的数的最小值：0000 0000 0000 0000 0000 0000 0000 0000。</li><li>四个字节表示的数的最大值：1111 1111 1111 1111 1111 1111 1111 1111。</li><li>八个字节(bytes) &#x3D; 64位(bits) <strong>很大的数</strong> 。</li><li>八个字节表示的数的最小值：0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000。</li><li>八个字节表示的数的最大值：1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111。</li></ul><p><code>tip</code>：<code>IPv6</code>：<strong>16个字节</strong></p><p><strong>基本的进制运算</strong></p><ul><li><p>16进制：<code>0x121</code> &#x3D; 1 * 16 ^ 2 + 2 * 16 ^ 1 + 1 * 16 ^ 0 。</p></li><li><p>8进制：<code>0121</code> &#x3D; 1 * 8 ^ 2 + 2 * 8 ^ 1 + 1 * 8 ^0。</p></li><li><p>二进制：<code>10011100</code> &#x3D; <code>0x9C</code> &#x3D; 9 * 16 ^ 1 + 12 * 16 ^ 0 &#x3D; 156。</p></li></ul><table><thead><tr><th align="center">十六进制</th><th align="center">0</th><th align="center">1</th><th align="center">2</th><th align="center">3</th><th align="center">4</th><th align="center">5</th><th align="center">6</th><th align="center">7</th><th align="center">8</th><th align="center">9</th><th align="center">A</th><th align="center">B</th><th align="center">C</th><th align="center">D</th><th align="center">E</th><th align="center">F</th><th align="center">G</th></tr></thead><tbody><tr><td align="center">十进制</td><td align="center">0</td><td align="center">1</td><td align="center">2</td><td align="center">3</td><td align="center">4</td><td align="center">5</td><td align="center">6</td><td align="center">7</td><td align="center">8</td><td align="center">9</td><td align="center">10</td><td align="center">11</td><td align="center">12</td><td align="center">13</td><td align="center">14</td><td align="center">15</td><td align="center">16</td></tr><tr><td align="center">八进制</td><td align="center">0</td><td align="center">1</td><td align="center">2</td><td align="center">3</td><td align="center">4</td><td align="center">5</td><td align="center">6</td><td align="center">7</td><td align="center">10</td><td align="center">11</td><td align="center">12</td><td align="center">13</td><td align="center">14</td><td align="center">15</td><td align="center">16</td><td align="center">17</td><td align="center">20</td></tr><tr><td align="center">二进制</td><td align="center">0000 0000</td><td align="center">0000 0001</td><td align="center">0000 0010</td><td align="center">0000 0011</td><td align="center">0000 0100</td><td align="center">0000 0101</td><td align="center">0000 0110</td><td align="center">0000 0111</td><td align="center">0000 1000</td><td align="center">0000 1001</td><td align="center">0000 1010</td><td align="center">0000 1011</td><td align="center">0000 1100</td><td align="center">0000 1101</td><td align="center">0000 1110</td><td align="center">0000 1111</td><td align="center">0001 0000</td></tr></tbody></table><p><strong>基本数据类型</strong></p><ul><li><code>int</code> 类型(integer)，整形，占4个字节，32位bit，表示范围 <strong>-2147483648~2147483647。</strong></li><li><code>short</code> 类型，短整型，占2个字节，16位bit，表示范围  <strong>-32768~32767</strong>。</li><li><code>long</code> 类型，长整型，占8个字节，64位bit，表示范围 <strong>很大</strong>。</li><li><code>char</code> 类型，字符类型，占1个字节，8位，表示范围：<strong>0~255</strong>，可以表示共256个字符，其中&#x2F;0用作字符串的结束符。</li><li><code>float</code> 类型，浮点型，占4个字节，32位，<code>1位数符</code>，<code>8位阶码</code> ，<code>23位尾数</code>。</li><li><code>double</code> 类型，双精度浮点型，占8个字节，64位，<code>1位数符</code>，<code>11位阶码</code> ，<code>52位尾数</code>。</li><li></li></ul><hr><h2 id="2-C语言运算符和表达式"><a href="#2-C语言运算符和表达式" class="headerlink" title="2. C语言运算符和表达式"></a>2. C语言运算符和表达式</h2><p><strong><code>tip</code>：左值和右值</strong></p><ul><li><p>左值：</p><ul><li><p><strong>能够出现在赋值语句左侧的表达式</strong>：</p><p>C语言中的左值（Lvalue，意为左值表达式）指的是<code>能出现在赋值语句左边</code>的表达式，即指向一个明确存储位置的表达式。左值表示的是对象的身份，它引用的是内存中一个具体而持久的位置。</p></li><li><p>可以将左值视为<strong>可以被赋值的实体</strong>，因为它指向的是一个可变更的存储位置。</p></li><li><p><strong>左值不仅限于变量，它也可以是更复杂的表达式</strong></p><ul><li>数组元素的引用；</li><li>解引用指针操作得到的结果；</li><li>只要一个变量或者表达式指向一个确切的存储位置，并且可以被赋值。</li></ul></li></ul></li><li><p>右值：，右值是指不能位于赋值语句左边的表达式，它通常代表数据值，而不是存储位置。简单来说，右值是表达式计算后的值，或者是无法被赋值的临时量。字面常量 <code>10</code> 或者<code>运算符的结果</code>都是右值。</p></li><li><p><code>&amp;</code> 运算符只能作用于一个左值。</p></li></ul><p><code>tip</code>：运算符的本质：在底层实现上，运算符代表着编译器在编译代码时应当生成何种机器指令来执行这些运算。例如，加法运算符会对应生成将两个数相加的机器指令。</p><p>运算符作用的结果：为一个右值，可以是一个常量也可以是一个变量。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> a = <span class="hljs-number">5</span>;<br><span class="hljs-type">int</span> b = <span class="hljs-number">2</span>;<br><span class="hljs-type">int</span> result = a + b; <span class="hljs-comment">// 结果取决于a和b的值 是一个变量</span><br><span class="hljs-type">int</span> result = <span class="hljs-number">3</span> + <span class="hljs-number">4</span>; <span class="hljs-comment">// 结果为一个常量</span><br><span class="hljs-type">int</span> result =  rand() % <span class="hljs-number">10</span>; <span class="hljs-comment">// 结果是一个随机数，依然是一个变量</span><br></code></pre></td></tr></table></figure><p><strong>算数运算符</strong></p><p>以下以：X &#x3D; 100，Y &#x3D; 30 为例</p><table><thead><tr><th align="center">运算符</th><th align="center">描述</th><th align="center">备注</th></tr></thead><tbody><tr><td align="center">+</td><td align="center">两个操作数相加，其结果为一个右值</td><td align="center">X+Y的结果为130</td></tr><tr><td align="center">-</td><td align="center">第一个数减去第二个数，其结果是一个右值</td><td align="center">X-Y的结果为70</td></tr><tr><td align="center">*</td><td align="center">两个操作数相乘，其结果是一个右值</td><td align="center">X*Y的结果是300</td></tr><tr><td align="center">&#x2F;</td><td align="center">左侧的操作数除以右侧的操作数，其结果是一个右值</td><td align="center">X&#x2F;Y的结果为3，两个整数相除，其结果为一个整数，舍弃小数部分；只有两个浮点数相除时，其结果才会是小数。</td></tr><tr><td align="center">%</td><td align="center">取模运算，含义上为整除后的余数</td><td align="center">X%Y的结果为10</td></tr><tr><td align="center">++</td><td align="center">自加运算，作用于整数，结果为原操作数加1</td><td align="center">X++得到101</td></tr><tr><td align="center">–</td><td align="center">自加运算，作用于整数，结果为原操作数减1</td><td align="center">X–得到99</td></tr></tbody></table><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> numX = <span class="hljs-number">100</span>;<br><span class="hljs-type">int</span> numY = <span class="hljs-number">30</span>;<br><br><span class="hljs-type">int</span> sum;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;sum:%d\n&quot;</span>, sum = num1 + num2); <span class="hljs-comment">// 运算符加法 打印sum的值</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;sum:%d\n&quot;</span>, sum); <span class="hljs-comment">// 打印sum的值 为130</span><br></code></pre></td></tr></table></figure><p>关于<code>++X</code>和<code>X++</code>：</p><ul><li>X++：先取X的值，后执行+1操作；</li><li>++X：先执行+1操作，后取X的值。</li></ul><hr><p><strong>逻辑运算符</strong></p><table><thead><tr><th align="center">运算符</th><th align="center">描述</th><th align="center">真值表</th></tr></thead><tbody><tr><td align="center">&amp;&amp;</td><td align="center">逻辑<strong>与</strong>运算符，全真为真，有假为假</td><td align="center">0 &amp;&amp; 0 -&gt; 0，0 &amp;&amp; 1 -&gt; 0，1 &amp;&amp; 0 -&gt; 0，1 &amp;&amp; 1 -&gt; 1</td></tr><tr><td align="center">||</td><td align="center">逻辑<strong>或</strong>运算符，有真为真，全假为假</td><td align="center">0 &amp;&amp; 0 -&gt; 0，0 &amp;&amp; 1 -&gt; 1，1 &amp;&amp; 0 -&gt; 1，1 &amp;&amp; 1 -&gt; 1</td></tr><tr><td align="center">！</td><td align="center">逻辑<strong>非</strong>运算符，真变为假，假变为真</td><td align="center">! 0 -&gt; 1，! 1 -&gt; 0</td></tr></tbody></table><p><code>tip</code>：关于<code>||</code>运算，如果左边以及确定为真，那么右边的运算符则会默认不执行。</p><hr><p><strong>条件表达式</strong></p><p><code>tip</code>：条件表达式的结果只能为<code>1</code>或<code>0</code>。</p><table><thead><tr><th align="center">表达式</th><th align="center">描述</th><th align="center">备注</th></tr></thead><tbody><tr><td align="center">&#x3D;&#x3D;</td><td align="center">判断左侧表达式与右侧编码上是否相等</td><td align="center"><code>char</code>类型的本质是<code>0~255</code>的数字，因此部分数字与char类型判断可能是相等的，例如<code>0==&#39;\0&#39;</code>的输出结果为<code>1</code>.</td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><hr><h2 id="3-C语言条件语句"><a href="#3-C语言条件语句" class="headerlink" title="3. C语言条件语句"></a>3. C语言条件语句</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">if</span> (<span class="hljs-comment">/* 条件语句1 */</span>)<br>&#123;<br>    <span class="hljs-comment">/* 条件语句1返回值为1执行代码 */</span><br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-comment">/* 条件语句2 */</span>)<br>&#123;<br><span class="hljs-comment">/* 条件语句1返回值为0,条件语句2返回值为1执行代码 */</span><br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>    <span class="hljs-comment">/* 条件语句1和2返回值都为0执行代码 */</span><br>&#125;    <br></code></pre></td></tr></table></figure><hr><h2 id="4-C语言条件选择语句"><a href="#4-C语言条件选择语句" class="headerlink" title="4. C语言条件选择语句"></a>4. C语言条件选择语句</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">switch</span> (<span class="hljs-comment">/* 表达式 */</span>)<br>&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-comment">/* 常量表达式1 */</span>:<br>    <span class="hljs-comment">/* 满足常量表达式1时的执行代码 */</span><br>    <span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-comment">/* 常量表达式2 */</span>:<br>    <span class="hljs-comment">/* 不满足常量表达式1,但满足常量表达式2时的执行代码 */</span><br>    <span class="hljs-keyword">break</span>;<br>……<br>……<br><span class="hljs-keyword">default</span>:<br>    <span class="hljs-comment">/* 所有常量表达式都不满足时，执行代码 */</span><br>    <span class="hljs-keyword">break</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>switch</code>表达式的每一个<code>case</code>条件下都需要在代码执行结尾执行一个<code>break</code>语句，否则代码会顺序执行到下一个<code>break</code>语句或者知道代码段结束。</p><p><code>tip</code>：<code>switch</code>选择的表达式只能是<code>整数</code>或者<code>字符串</code>。</p><hr><h2 id="5-C语言预编译"><a href="#5-C语言预编译" class="headerlink" title="5. C语言预编译"></a>5. C语言预编译</h2><p>#后的内容为预编译语句</p><ul><li><code>#ifndef</code> <code>#define</code> <code>#endif</code> 哟版用于<code>.h</code>头文件，用来防止重复定义头文件</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> __MYADD_H__</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __MYADD_H__</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">myAdd</span><span class="hljs-params">(<span class="hljs-type">int</span> num1, <span class="hljs-type">int</span> num2)</span>;<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><ul><li><p><code>#define</code> 在程序预编译时对程序中的预编译的内容进行替换。</p></li><li><p><code>#if...#elif...#eles...#endif</code> 条件编译。</p><ul><li><code>if 0</code>自动注释后面的代码，编译时不生成机器指令。</li></ul></li></ul><hr><h2 id="6-C语言格式化输出"><a href="#6-C语言格式化输出" class="headerlink" title="6. C语言格式化输出"></a>6. C语言格式化输出</h2><ul><li><code>%d</code> 格式化输出整数。</li><li><code>%s</code> 格式化输出字符串。</li><li><code>%p</code> 格式化输出地址。</li><li><code>%c</code> 格式化输出字符。</li><li><code>%f</code> 格式化输出浮点型。</li></ul><hr><h2 id="7-C语言循环语句"><a href="#7-C语言循环语句" class="headerlink" title="7. C语言循环语句"></a>7. C语言循环语句</h2><p>C语言的三种循环语句：</p><ul><li><code>while</code> 一般用于循环次数未知的情况。‘</li><li><code>do while</code> 先运行一次函数体，在执行条件判断语句，先执行后判断。</li><li><code>for</code> 一般用于循环次数已知或者可以预测的情况。</li></ul><p><code>for</code>循环执行顺序如下，初始化语句只执行一次：</p><img src="/2024/01/28/C%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/pic.jpg" class=""><hr><h2 id="8-C语言数组"><a href="#8-C语言数组" class="headerlink" title="8. C语言数组"></a>8. C语言数组</h2><ul><li>数组一般是一个连续的地址空间。</li><li>数组中存放相同的数据类型。</li><li>在初始化数组时，需要对数组中的脏数据进行清理，一般使用<code>memset</code>函数惊醒清理。</li><li>数组在定义时需要指定数组的元素个数。</li><li><code>数组名</code>的本质是数组的<code>首地址</code>，也是<code>第一个数组元素</code>所存放的地址。</li><li>数组长度为数组类型所占的字节数 * 数组中变量的个数。</li><li>数组作为<code>函数变量</code>时会自动退化为<code>指针</code>，因此数组作为函数变量时必须指定数组的长度。</li></ul><hr><h2 id="9-C语言内存"><a href="#9-C语言内存" class="headerlink" title="9. C语言内存"></a>9. C语言内存</h2><p>内存共有四个分区</p><ol><li>非法地址区：<code>0~4个字节</code></li><li>全局区：没有大小概念，存储字符串常量</li><li>堆区：堆区的大小与内存条大小有关，对程序员可见，<code>malloc</code>申请内存空间</li><li>栈区：<code>8MB</code>，系统自动分配</li></ol><p><code>tip</code>：C语言函数中的所有普通变量(数据类型修饰的变量)都存放在栈区。</p><hr><h2 id="10-C语言函数"><a href="#10-C语言函数" class="headerlink" title="10. C语言函数"></a>10. C语言函数</h2><p>C语言函数的三要素：</p><ul><li><p>函数名：见名知意</p></li><li><p>函数参数：</p><ul><li><p>传入参数</p><p>在函数中可以被修改或者引用的参数。</p><ul><li><code>整形数据</code>：没有指针修饰的就是传入参数，即<code>值传递</code></li><li><code>字符串</code>：没有<code>const</code>修饰的变量就是传入参数，这样的变量在函数中可以自由被修改。</li></ul></li><li><p>传出参数：</p><p>由于函数只有一个返回值，当需要对多个参数进行修改时，就会用到传出参数，即参数本生一般没有值或者是在函数中需要进行更改的变量。</p><ul><li><p><code>整形数据</code>：有指针修饰的就是传出参数，即<code>地址传递</code></p></li><li><p><code>字符串</code>：被<code>const</code>修饰的变量就是传出参数。</p><p><code>tip</code>：const修饰的是<code>char *</code>，即不能被修改的是 字符指针变量而不是字符串本身，因此在函数中字符串还是可以被修改并作为传出参数的。</p></li></ul></li></ul></li><li><p>函数返回值</p></li></ul><hr><h2 id="11-C语言字符串"><a href="#11-C语言字符串" class="headerlink" title="11. C语言字符串"></a>11. C语言字符串</h2><ul><li>字符串存放位置：<code>全局区</code></li></ul><p>C语言字符串的4中声明类型：</p><ul><li>其中<code>赋值方式2</code>和<code>赋值方式3</code>由于是双引号声明的变量，因此在结尾会加一个<code>\0</code></li><li><code>tip</code>：<code>strlen</code>与<code>sizeof</code>的区别</li></ul><p><code>sizeof</code>:</p><p>一般来说，<code>sizeof</code>用于计算数据的长度，即所占字节数。</p><table><thead><tr><th align="center">用途</th><th>举例</th><th align="center">结果</th><th align="center">解释</th></tr></thead><tbody><tr><td align="center"><code>sizeof(字符串指针)</code></td><td>char *pa &#x3D; “hello world”</td><td align="center">8</td><td align="center">作为字符串指针，那么它的数据类型为指针类型，指针类型固定占8字节内存。</td></tr><tr><td align="center"><code>sizeof(基本数据类型)</code></td><td>int a &#x3D; 100</td><td align="center">数据类型所占的字节数</td><td align="center">&#x2F;</td></tr><tr><td align="center"><code>sizeof(不定长字符数组)</code></td><td>char array[] &#x3D; “hello world”</td><td align="center">12</td><td align="center">当需要计算的数据类型是数组时，<code>sizeof(array)</code>所代表的是一整个数组的长度(字符串长度加上一个<code>\0</code>，<code>11 + 1 = 12</code>)，数组的声明实际上相当于<code>char[] array = &quot;hello world&quot;</code>，即整个<code>char[]</code>为array的数据类型。</td></tr><tr><td align="center"><code>sizeof(定长字符数组)</code></td><td>char array[20]</td><td align="center">20</td><td align="center">含义同上，相当于<code>char[20] array</code>。其结果为20个<code>char</code>类型变量的总长度。</td></tr></tbody></table><p><code>sizeof</code>和<code>strlen</code>的区别于联系：</p><table><thead><tr><th align="center"></th><th align="center">用途</th><th align="center">字符数组的大小</th></tr></thead><tbody><tr><td align="center"><code>sizeof</code></td><td align="center">计算数据大小</td><td align="center">当声明字符数组时<code>声明了字符数组的大小</code>，那么结果就是所声明的大小；如果<code>未指定字符数组的大小</code>，那么计算结果就是字符串的长度加上一个<code>\0</code>的大小，例如”hello world”，字符串长度为11个字节，加上一个<code>\0</code>为12个字节。</td></tr><tr><td align="center"><code>strlen</code></td><td align="center">计算字符串的长度</td><td align="center">这个函数返回的是当前字符串的长度，不包含<code>\0</code>，因此同样对于一个字符串”hello world”，这个函数的计算结果则是<code>11</code>。然而，由于<code>strlen</code>函数的特性，并且只有以被<code>双引号</code>包起来的字符串才<code>会在末尾自动加一个\0</code>。当没有找到<code>\0</code>时，它就会一直往下计算，因此当一个函数声明了多个字符数组，或者存在脏数据时，这个函数会产生运算错误。</td></tr></tbody></table><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">/* 字符数组 */</span><br><span class="hljs-type">char</span> buffer[BUFFER_SIZE];<br><span class="hljs-comment">/* 清理脏数据 */</span><br><span class="hljs-built_in">memset</span>(buffer, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(buffer));<br><br><span class="hljs-comment">// 字符赋值方式1:</span><br>buffer[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;h&#x27;</span>;<br>buffer[<span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;e&#x27;</span>;<br><br><span class="hljs-comment">// 字符赋值方式2:</span><br><span class="hljs-comment">/* strcpy 目的操作数 源操作数 */</span><br><span class="hljs-built_in">strcpy</span>(buffer, <span class="hljs-string">&quot;hello world&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;buffer:%s\n&quot;</span>, buffer);<br><br><span class="hljs-comment">// 字符赋值方式3:直接赋值</span><br><span class="hljs-type">char</span> buffer2[BUFFER_SIZE] = <span class="hljs-string">&quot;hello world&quot;</span>; <br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;buffer2:%s\n&quot;</span>, buffer2);<br><br><span class="hljs-comment">// 字符赋值方式4:直接赋值</span><br><span class="hljs-type">char</span> buffer3[BUFFER_SIZE] = &#123;<span class="hljs-string">&#x27;h&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;l&#x27;</span>,<span class="hljs-string">&#x27;l&#x27;</span>, <span class="hljs-string">&#x27;o&#x27;</span>&#125;; <br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;buffer3:%s\n&quot;</span>, buffer3);<br></code></pre></td></tr></table></figure><hr><h2 id="12-C语言指针"><a href="#12-C语言指针" class="headerlink" title="12. C语言指针"></a>12. C语言指针</h2><p>介绍两个指针相关的运算符。</p><ul><li><code>*</code> 既可以充当指针变量的声明，也是运算符<code>解引用</code>符号。</li><li><code>&amp;</code> 取地址符号。</li></ul><p>只有指针类型的变量才能与<code>*</code>运算符结合，结合后得到的内容是当前指针指向的内存空间所保存的数据，可能是任何类型的数据。</p><p>只有保存在内存空间中的数据才能与<code>&amp;</code>运算符结合，结合后得到的内容是当前数据所在的地址空间，是一个之战类型的数据。</p><p><code>tip</code>：指针类型的数据本质就是<code>地址</code>，占<code>8个字节</code>，但是由于操作系统分页存储的原因，在打印时一般只显示6字节的地址内容，高16位表示页号。</p><p><code>tip</code>：所有<code>指针</code>类型数据就是<code>地址</code>，<code>地址</code>也是<code>指针</code>类型的数据。但是指针所指向的内容要看指针所指向的内存空间的数据类型，可能是任意类型数据。</p><img src="/2024/01/28/C%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/pic-1706016047455-4.jpg" class=""><p><strong>二级指针</strong></p><ul><li>二级指针的本质也是指针。</li><li>该二级指针修饰的类型是 <code>int **</code>，变量名为<code>ppa</code>。</li><li><code>*</code>作用于二级指针所得到的数据还是一个地址，或者说还是一个指针类型数据。</li><li>二级指针指向的指针数据为<code>*ppa</code>，在内容上与<code>pa</code>相同。</li></ul><img src="/2024/01/28/C%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/image-20240125094618917.png" class=""><p><strong>使用指针</strong></p><ul><li><p>声明指针类型数据必须进行初始化，如果暂时不能确定指针所指向的地址空间，则需要对指针赋值<code>NULL</code>，指向地址空间<code>0x00</code>，但是这块地址空间是非法的，对这块内存空间进行任何操作都会导致段错误<code>Segmentation fault (core dumped)</code>。</p></li><li><p>在使用指针作为函数参数时，在函数中第一步必须进行判空。</p><p><strong>判空后操作</strong></p><ul><li><p>如果空指针在这个函数中是非法的，那么需要立即终值函数。</p><ul><li><p>终止操作：</p><p><code>perror(&quot;错误信息&quot;);</code></p><p><code>exit(-1);</code></p></li></ul></li><li><p>如果后续需要使用到这个指针，那么必须对这个指针数据<code>pointer</code>进行初始化。</p><ul><li><p>假设这个指针为：<code>char *pointer = NULL;</code></p><p><code>pointer = (char *)malloc(size);</code></p><p><code>size</code>必须以参数的形式通过函数传递。</p></li></ul></li></ul></li></ul><hr><h2 id="13-gdb调试"><a href="#13-gdb调试" class="headerlink" title="13. gdb调试"></a>13. <strong>gdb</strong>调试</h2><p>使用以下命令对一个<code>.c</code>进行<code>gdb</code>调试：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cmd">gcc -g [文件名] # 以debug方式编译C语言文件<br>apt install gdb # 下载gdb调试器<br><br>gdb [编译好的可执行文件] # 进入gdb调试<br># gdb调试命令<br>b [行号] # 在某一行添加断点<br>b [函数名] # 在函数入口处添加断点<br><br><span class="hljs-built_in">del</span> [断点序号] # 删除断点<br><br>run # 运行函数<br>s # 进入函数内部<br>n # 进入下一行<br>p &amp;[变量] # 打印变量地址<br></code></pre></td></tr></table></figure><p><code>tip</code>：使用<code>gdb</code>调试检查程序段错误<code>Segmentation fault (core dumped)</code>。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cmd">gcc -g demoCharPointer.c<br>gdb a.out<br>run<br># 会在末尾处打印段错误信息。<br></code></pre></td></tr></table></figure><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-function">root@iZbp11t02fism5k702usgjZ:/<span class="hljs-title">home</span>/257<span class="hljs-title">class</span>/<span class="hljs-title">BasiC</span>/<span class="hljs-title">BasiC</span>/<span class="hljs-title">pointer</span># <span class="hljs-title">gcc</span> -<span class="hljs-title">g</span> <span class="hljs-title">demoCharPointer.c</span></span><br><span class="hljs-function"><span class="hljs-title">root</span>@<span class="hljs-title">iZbp11t02fism5k702usgjZ</span>:/<span class="hljs-title">home</span>/257<span class="hljs-title">class</span>/<span class="hljs-title">BasiC</span>/<span class="hljs-title">BasiC</span>/<span class="hljs-title">pointer</span># <span class="hljs-title">gdb</span> <span class="hljs-title">a.out</span></span><br><span class="hljs-function"><span class="hljs-title">GNU</span> <span class="hljs-title">gdb</span> (<span class="hljs-title">Ubuntu</span> 12.1-0<span class="hljs-title">ubuntu1</span>~22.04) 12.1</span><br><span class="hljs-function"><span class="hljs-title">Copyright</span> (<span class="hljs-title">C</span>) 2022 <span class="hljs-title">Free</span> <span class="hljs-title">Software</span> <span class="hljs-title">Foundation</span>, <span class="hljs-title">Inc</span>.</span><br><span class="hljs-function"><span class="hljs-title">License</span> <span class="hljs-title">GPLv3</span>+: <span class="hljs-title">GNU</span> <span class="hljs-title">GPL</span> <span class="hljs-title">version</span> 3 <span class="hljs-title">or</span> <span class="hljs-title">later</span> &lt;<span class="hljs-title">http</span>://<span class="hljs-title">gnu.org</span>/<span class="hljs-title">licenses</span>/<span class="hljs-title">gpl.html</span>&gt;</span><br><span class="hljs-function"><span class="hljs-title">This</span> <span class="hljs-title">is</span> <span class="hljs-title">free</span> <span class="hljs-title">software</span>: <span class="hljs-title">you</span> <span class="hljs-title">are</span> <span class="hljs-title">free</span> <span class="hljs-title">to</span> <span class="hljs-title">change</span> <span class="hljs-title">and</span> <span class="hljs-title">redistribute</span> <span class="hljs-title">it</span>.</span><br><span class="hljs-function"><span class="hljs-title">There</span> <span class="hljs-title">is</span> <span class="hljs-title">NO</span> <span class="hljs-title">WARRANTY</span>, <span class="hljs-title">to</span> <span class="hljs-title">the</span> <span class="hljs-title">extent</span> <span class="hljs-title">permitted</span> <span class="hljs-title">by</span> <span class="hljs-title">law</span>.</span><br><span class="hljs-function"><span class="hljs-title">Type</span> &quot;<span class="hljs-title">show</span> <span class="hljs-title">copying</span>&quot; <span class="hljs-title">and</span> &quot;<span class="hljs-title">show</span> <span class="hljs-title">warranty</span>&quot; <span class="hljs-title">for</span> <span class="hljs-title">details</span>.</span><br><span class="hljs-function"><span class="hljs-title">This</span> <span class="hljs-title">GDB</span> <span class="hljs-title">was</span> <span class="hljs-title">configured</span> <span class="hljs-title">as</span> &quot;<span class="hljs-title">x86_64</span>-<span class="hljs-title">linux</span>-<span class="hljs-title">gnu</span>&quot;.</span><br><span class="hljs-function"><span class="hljs-title">Type</span> &quot;<span class="hljs-title">show</span> <span class="hljs-title">configuration</span>&quot; <span class="hljs-title">for</span> <span class="hljs-title">configuration</span> <span class="hljs-title">details</span>.</span><br><span class="hljs-function"><span class="hljs-title">For</span> <span class="hljs-title">bug</span> <span class="hljs-title">reporting</span> <span class="hljs-title">instructions</span>, <span class="hljs-title">please</span> <span class="hljs-title">see</span>:</span><br><span class="hljs-function">&lt;<span class="hljs-title">https</span>://<span class="hljs-title">www.gnu.org</span>/<span class="hljs-title">software</span>/<span class="hljs-title">gdb</span>/<span class="hljs-title">bugs</span>/&gt;.</span><br><span class="hljs-function"><span class="hljs-title">Find</span> <span class="hljs-title">the</span> <span class="hljs-title">GDB</span> <span class="hljs-title">manual</span> <span class="hljs-title">and</span> <span class="hljs-title">other</span> <span class="hljs-title">documentation</span> <span class="hljs-title">resources</span> <span class="hljs-title">online</span> <span class="hljs-title">at</span>:</span><br><span class="hljs-function">--<span class="hljs-title">Type</span> &lt;<span class="hljs-title">RET</span>&gt; <span class="hljs-title">for</span> <span class="hljs-title">more</span>, <span class="hljs-title">q</span> <span class="hljs-title">to</span> <span class="hljs-title">quit</span>, <span class="hljs-title">c</span> <span class="hljs-title">to</span> <span class="hljs-title">continue</span> <span class="hljs-title">without</span> <span class="hljs-title">paging</span>--<span class="hljs-title">c</span></span><br><span class="hljs-function">    &lt;<span class="hljs-title">http</span>://<span class="hljs-title">www.gnu.org</span>/<span class="hljs-title">software</span>/<span class="hljs-title">gdb</span>/<span class="hljs-title">documentation</span>/&gt;.</span><br><span class="hljs-function"></span><br><span class="hljs-function"><span class="hljs-title">For</span> <span class="hljs-title">help</span>, <span class="hljs-title">type</span> &quot;<span class="hljs-title">help</span>&quot;.</span><br><span class="hljs-function"><span class="hljs-title">Type</span> &quot;<span class="hljs-title">apropos</span> <span class="hljs-title">word</span>&quot; <span class="hljs-title">to</span> <span class="hljs-title">search</span> <span class="hljs-title">for</span> <span class="hljs-title">commands</span> <span class="hljs-title">related</span> <span class="hljs-title">to</span> &quot;<span class="hljs-title">word</span>&quot;...</span><br><span class="hljs-function"><span class="hljs-title">Reading</span> <span class="hljs-title">symbols</span> <span class="hljs-title">from</span> <span class="hljs-title">a.out</span>...</span><br><span class="hljs-function">(<span class="hljs-title">gdb</span>) <span class="hljs-title">run</span></span><br><span class="hljs-function"><span class="hljs-title">Starting</span> <span class="hljs-title">program</span>: /<span class="hljs-title">home</span>/257<span class="hljs-title">class</span>/<span class="hljs-title">BasiC</span>/<span class="hljs-title">BasiC</span>/<span class="hljs-title">pointer</span>/<span class="hljs-title">a.out</span> </span><br><span class="hljs-function">[<span class="hljs-title">Thread</span> <span class="hljs-title">debugging</span> <span class="hljs-title">using</span> <span class="hljs-title">libthread_db</span> <span class="hljs-title">enabled</span>]</span><br><span class="hljs-function"><span class="hljs-title">Using</span> <span class="hljs-title">host</span> <span class="hljs-title">libthread_db</span> <span class="hljs-title">library</span> &quot;/<span class="hljs-title">lib</span>/<span class="hljs-title">x86_64</span>-<span class="hljs-title">linux</span>-<span class="hljs-title">gnu</span>/<span class="hljs-title">libthread_db.so</span>.1&quot;.</span><br><span class="hljs-function"><span class="hljs-title">len</span>:8</span><br><span class="hljs-function"></span><br><span class="hljs-function"><span class="hljs-title">Program</span> <span class="hljs-title">received</span> <span class="hljs-title">signal</span> <span class="hljs-title">SIGSEGV</span>, <span class="hljs-title">Segmentation</span> <span class="hljs-title">fault</span>.</span><br><span class="hljs-function">0<span class="hljs-title">x0000555555555192</span> <span class="hljs-title">in</span> <span class="hljs-title">main</span> (<span class="hljs-title">argc</span>=1, <span class="hljs-title">argv</span>=0<span class="hljs-title">x7fffffffe198</span>) <span class="hljs-title">at</span> <span class="hljs-title">demoCharPointer.c</span>:12</span><br><span class="hljs-function">12          <span class="hljs-title">strcpy</span>(<span class="hljs-title">ptr</span>, &quot;<span class="hljs-title">hello</span> <span class="hljs-title">world</span>&quot;);</span><br><span class="hljs-function">(<span class="hljs-title">gdb</span>) </span><br></code></pre></td></tr></table></figure><hr><h2 id="14-字符串与字符数组"><a href="#14-字符串与字符数组" class="headerlink" title="14. 字符串与字符数组"></a>14. 字符串与字符数组</h2><p><strong>字符串存放位置</strong>：<code>全局区</code></p><p><code>字符串</code>：</p><ul><li>所有用双引号括起来的都是字符串。</li><li>所有字符串都会在末尾处添加一个<code>\0</code>作为结束标志。</li><li>字符串长度为：<code>字符个数+1</code></li></ul><p><code>字符数组</code>：</p><ul><li>字符数组的大小为数组大小。</li><li>使用以下两种方式初始化字符数组时，不会在末尾自动添加<code>\0</code>：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">char</span> buffer[BUFFER_SIZE];<br><span class="hljs-comment">/* 清理脏数据 */</span><br><span class="hljs-built_in">memset</span>(buffer, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(buffer));<br><span class="hljs-comment">// 字符赋值方式1:</span><br>buffer[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;h&#x27;</span>;<br>buffer[<span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;e&#x27;</span>;<br><span class="hljs-comment">// 字符赋值方式4:</span><br><span class="hljs-type">char</span> buffer3[BUFFER_SIZE] = &#123;<span class="hljs-string">&#x27;h&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;l&#x27;</span>,<span class="hljs-string">&#x27;l&#x27;</span>, <span class="hljs-string">&#x27;o&#x27;</span>&#125;; <br></code></pre></td></tr></table></figure><ul><li>使用以下方式初始化字符数组会在末尾添加<code>\0</code>：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 字符赋值方式2:</span><br><span class="hljs-built_in">strcpy</span>(buffer, <span class="hljs-string">&quot;hello world&quot;</span>);<br><span class="hljs-comment">// 字符赋值方式3:</span><br><span class="hljs-type">char</span> buffer2[BUFFER_SIZE] = <span class="hljs-string">&quot;hello world&quot;</span>; <br></code></pre></td></tr></table></figure><ul><li>对字符数组&#x3D;赋值时，后面跟着的字符串长度可能会超出字符数组的大小，这个时候就有可能访问到一些不能被访问的内存，这个操作就叫做<code>踩内存</code>，而这种操作是不被允许的。</li></ul><p>字符串和字符数组的内存分配：</p><ul><li>字符数组在声明时自动在<code>栈</code>空间分配内存，这也是其他基本数据类型的分配内存方式；</li><li>字符串指针初始化时，如果不对其赋初值，那么必须使其指向<code>NULL</code>，其内存空间为<code>0x00</code>;</li><li>系统中程序员分配的空间为堆空间，可以使用<code>malloc</code>函数初始化申请空间。并且所有malloc申请的内存空间都要进行<code>判空</code>操作，且在用完后都要进行<code>free</code>释放内存。</li></ul><img src="/2024/01/28/C%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/pic-1706251623850-3.jpg" class=""><hr><h2 id="15-堆泄漏"><a href="#15-堆泄漏" class="headerlink" title="15. 堆泄漏"></a>15. 堆泄漏</h2><p>有三种堆泄漏的情况</p><ul><li><code>野指针</code>：声明指针类型数据，但是没有初始化，如<code>char *ptr;</code>。</li><li><code>malloc申请的内存空间没有释放</code>。</li><li><code>踩内存</code>：访问了原本不属于变量自己的内存空间就叫做踩内存，一般发生在数组中。<ul><li><code>int array[20]; array[21] = 0;</code>。</li><li><code>for</code>循环数组下表访问不当也会引起这样的问题。</li></ul></li></ul><p>检查内存泄漏的命令：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">valgrind --tool=memcheck --leak-check=yes --show-reachable=yes ./[需要检查的.exe文件]<br></code></pre></td></tr></table></figure><hr><h2 id="16-指针即数组"><a href="#16-指针即数组" class="headerlink" title="16. 指针即数组"></a>16. 指针即数组</h2><p>声明数组变量：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> arrray[<span class="hljs-number">20</span>];<br></code></pre></td></tr></table></figure><p>上述代码等价于<code>int[20] array </code></p><ul><li>表示变量<code>array</code>是一个有<code>20个int空间</code>的数组类型变量。</li><li>同时<code>array</code>也是这20个数组空间的首地址。</li><li><code>array</code>与<code>&amp;array[0]</code>是相同的。</li><li>同时<code>array</code>与<code>&amp;array[0]</code>都是地址数据，同时也是指针类型的变量。</li></ul><p><code>tip</code>：数组作为函数变量时会自动退化为指针，因此数组作为函数变量时必须指定数组的长度。</p><p>例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> <span class="hljs-type">const</span> *argv[])</span><br>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p><code>argc</code>为传入参数的个数</p></li><li><p><code>argv</code>为传入参数的地址列表</p></li></ul><hr><h2 id="17-二维数组与二维指针"><a href="#17-二维数组与二维指针" class="headerlink" title="17. 二维数组与二维指针"></a>17. 二维数组与二维指针</h2><p><strong>二维数组是由一维数组构成的：</strong></p><p><code>int array[ROW][COLUMN]</code>，<code>加一</code>作用于不同的变量，它加上的值是不同的：</p><ul><li><code>array</code>，array为二级指针，即指向指针的指针。<code>+1</code>作用于<code>array</code>，<code>array</code>的值加上<code>4 * COLUMN</code>。</li><li><code>*array</code>或者<code>array[x]</code>，它们都是一级指针。<code>+1</code>作用于它们，它们的值加上<code>4</code>.</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ROW 3</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> COLUMN 3</span><br><br><span class="hljs-comment">// 二维数组</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">if</span> 0</span><br>    <span class="hljs-type">int</span> <span class="hljs-built_in">array</span>[<span class="hljs-number">3</span>];<br><br>    <span class="hljs-built_in">array</span>[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">array</span>[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">array</span>[<span class="hljs-number">2</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// 不是自己的空间不能放</span><br>    <span class="hljs-built_in">array</span>[<span class="hljs-number">3</span>] = <span class="hljs-number">1</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> 1</span><br>    <span class="hljs-type">int</span> <span class="hljs-built_in">array</span>[ROW][COLUMN];<br>    <span class="hljs-built_in">memset</span>(<span class="hljs-built_in">array</span>, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-built_in">array</span>));<br>    <span class="hljs-comment">/*  1.占用内存大小 */</span><br>    <span class="hljs-type">int</span> len = <span class="hljs-keyword">sizeof</span>(<span class="hljs-built_in">array</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;len:%d\n&quot;</span>, len);<br><br>    <span class="hljs-comment">/*  2.赋值 */</span><br>    <span class="hljs-comment">// a[0][0] = 0;</span><br>    <span class="hljs-type">int</span> value = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> idx = <span class="hljs-number">0</span>; idx &lt; ROW; idx++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> jdx = <span class="hljs-number">0</span>; jdx &lt; COLUMN; jdx++)<br>        &#123;<br>            <span class="hljs-built_in">array</span>[idx][jdx] = value++;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;array = %p\n&quot;</span>, <span class="hljs-built_in">array</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;array + 1 = %p\n&quot;</span>, <span class="hljs-built_in">array</span> + <span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;array[0] = %p\n&quot;</span>, <span class="hljs-built_in">array</span>[<span class="hljs-number">0</span>]);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;array[0] + 1 = %p\n&quot;</span>, <span class="hljs-built_in">array</span>[<span class="hljs-number">0</span>] + <span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;*array = %p\n&quot;</span>, *<span class="hljs-built_in">array</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;*array + 1 = %p\n&quot;</span>, *<span class="hljs-built_in">array</span> + <span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;*(array[0]) = %d\n&quot;</span>, *(<span class="hljs-built_in">array</span>[<span class="hljs-number">0</span>]));<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;**array = %d\n&quot;</span>, **<span class="hljs-built_in">array</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;&amp;(**array) = %p\n&quot;</span>, &amp;(**<span class="hljs-built_in">array</span>));<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;-----------------------\n&quot;</span>);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;array[1][2] = %d\n&quot;</span>, <span class="hljs-built_in">array</span>[<span class="hljs-number">1</span>][<span class="hljs-number">2</span>]);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;*(*(array + 1) + 2) = %d\n&quot;</span>, *(*(<span class="hljs-built_in">array</span> + <span class="hljs-number">1</span>) + <span class="hljs-number">2</span>));<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;&amp;array[1][2] = %p\n&quot;</span>, &amp;<span class="hljs-built_in">array</span>[<span class="hljs-number">1</span>][<span class="hljs-number">2</span>]);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;(*(array + 1) + 2) = %p\n&quot;</span>, *(<span class="hljs-built_in">array</span> + <span class="hljs-number">1</span>) + <span class="hljs-number">2</span>);<br><br>    <span class="hljs-comment">// array[1]  = *(array + 1)</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;(array[1] + 2) = %p\n&quot;</span>, (<span class="hljs-built_in">array</span>[<span class="hljs-number">1</span>] + <span class="hljs-number">2</span>));<br>    <span class="hljs-comment">// 每一行对应的地址</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;array[1] = %p\n&quot;</span>, <span class="hljs-built_in">array</span>[<span class="hljs-number">1</span>]);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>&#125;<br></code></pre></td></tr></table></figure><p>上述代码打印结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-function">root@iZbp11t02fism5k702usgjZ:/<span class="hljs-title">home</span>/257<span class="hljs-title">class</span>/<span class="hljs-title">BasiC</span>/<span class="hljs-title">BasiC</span>/<span class="hljs-title">array</span># ./<span class="hljs-title">a.out</span></span><br><span class="hljs-function"><span class="hljs-title">len</span>:36</span><br><span class="hljs-function"><span class="hljs-title">array</span> = 0<span class="hljs-title">x7ffdfb683c80</span></span><br><span class="hljs-function"><span class="hljs-title">array</span> + 1 = 0<span class="hljs-title">x7ffdfb683c8c</span></span><br><span class="hljs-function"><span class="hljs-title">array</span>[0] = 0<span class="hljs-title">x7ffdfb683c80</span></span><br><span class="hljs-function"><span class="hljs-title">array</span>[0] + 1 = 0<span class="hljs-title">x7ffdfb683c84</span></span><br><span class="hljs-function">*<span class="hljs-title">array</span> = 0<span class="hljs-title">x7ffdfb683c80</span></span><br><span class="hljs-function">*<span class="hljs-title">array</span> + 1 = 0<span class="hljs-title">x7ffdfb683c84</span></span><br><span class="hljs-function">*(<span class="hljs-title">array</span>[0]) = 1</span><br><span class="hljs-function">**<span class="hljs-title">array</span> = 1</span><br><span class="hljs-function">&amp;(**<span class="hljs-title">array</span>) = 0<span class="hljs-title">x7ffdfb683c80</span></span><br><span class="hljs-function">-----------------------</span><br><span class="hljs-function"><span class="hljs-title">array</span>[1][2] = 6</span><br><span class="hljs-function">*(*(<span class="hljs-title">array</span> + 1) + 2) = 6</span><br><span class="hljs-function">&amp;<span class="hljs-title">array</span>[1][2] = 0<span class="hljs-title">x7ffdfb683c94</span></span><br><span class="hljs-function">(*(<span class="hljs-title">array</span> + 1) + 2) = 0<span class="hljs-title">x7ffdfb683c94</span></span><br><span class="hljs-function">(<span class="hljs-title">array</span>[1] + 2) = 0<span class="hljs-title">x7ffdfb683c94</span></span><br><span class="hljs-function"><span class="hljs-title">array</span>[1] = 0<span class="hljs-title">x7ffdfb683c8c</span></span><br><span class="hljs-function"><span class="hljs-title">root</span>@<span class="hljs-title">iZbp11t02fism5k702usgjZ</span>:/<span class="hljs-title">home</span>/257<span class="hljs-title">class</span>/<span class="hljs-title">BasiC</span>/<span class="hljs-title">BasiC</span>/<span class="hljs-title">array</span># </span><br></code></pre></td></tr></table></figure><img src="/2024/01/28/C%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/image-20240126154436534.png" class=""><hr><h2 id="18-C语言文件编译的过程"><a href="#18-C语言文件编译的过程" class="headerlink" title="18. C语言文件编译的过程"></a>18. C语言文件编译的过程</h2><p><code>预编译-&gt;编译-&gt;汇编-&gt;链接</code></p><ol><li><p>预编译</p><p>C++文件：<code>gcc -E [文件名.cpp] &gt; [预处理文件名.ii]</code>：生成<code>.ii</code>文件</p><p>C语言文件：<code>gcc -E [文件名.c] &gt; [预处理文件名.i]</code>：生成<code>.i</code>文件</p><p>预编译的工作内容</p><ul><li>展开头文件 ：<code>#include &lt;stdio.h&gt;</code></li><li>宏替换</li><li>去掉代码中的注释</li><li>条件编译</li></ul></li><li><p>编译</p><p>目标：生成<code>.s</code>文件(汇编文件)</p><p><code>gcc -S [预处理文件名.i]</code></p></li><li><p>汇编</p><p>目标：生成<code>.o</code>文件</p><p><code>gcc -c [编译文件名.s]</code></p></li><li><p>链接</p><p>目标：生成<code>.exe</code>文件</p><p><code>gcc [汇编文件名.o]</code></p></li></ol><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cmd"># 示例代码<br>gcc -E main.c &gt; main.i<br>gcc -S main.i<br>gcc -c main.s<br>gcc main.o<br></code></pre></td></tr></table></figure><img src="/2024/01/28/C%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/image-20240127213443580-1706429856754-6.png" class="">]]></content>
    
    
    <categories>
      
      <category>从C语言入门到C++精通</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C语言</tag>
      
      <tag>Linux</tag>
      
      <tag>内存分区</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Makefile基础</title>
    <link href="/2024/01/28/Makefile%E5%9F%BA%E7%A1%80/"/>
    <url>/2024/01/28/Makefile%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="makefile基础"><a href="#makefile基础" class="headerlink" title="makefile基础"></a>makefile基础</h1><h2 id="0-C语言文件编译流程。你必须明白！"><a href="#0-C语言文件编译流程。你必须明白！" class="headerlink" title="0. C语言文件编译流程。你必须明白！"></a>0. C语言文件编译流程。你必须明白！</h2><p>预编译-&gt;编译-&gt;汇编-&gt;链接</p><ol><li><p>预编译所做的事情：</p><p>C++文件：<code>gcc -E [文件名.cpp] &gt; [预处理文件名.ii]</code>：生成<code>.ii</code>文件</p><p>C语言文件：<code>gcc -E [文件名.c] &gt; [预处理文件名.i]</code>：生成<code>.i</code>文件</p><ul><li>展开头文件 ：<code>#include &lt;stdio.h&gt;</code></li><li>宏替换</li><li>去掉代码中的注释</li><li>条件编译</li></ul></li><li><p>编译</p><p><code>gcc -E [预处理文件名.i]</code>：生成<code>.s</code>文件(汇编文件)</p></li><li><p>汇编</p><p><code>gcc -c [编译文件名.s]</code>：生成<code>.o</code>文件</p></li><li><p>链接</p><p><code>gcc [汇编文件名.o]</code>：生成<code>.exe</code>文件</p></li></ol><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cmd"># 示例代码<br>gcc -E main.c &gt; main.i<br>gcc -S main.i<br>gcc -c main.s<br>gcc main.o<br></code></pre></td></tr></table></figure><hr><h2 id="2-一个make解决所有"><a href="#2-一个make解决所有" class="headerlink" title="2. 一个make解决所有"></a>2. 一个make解决所有</h2><p>在工作目录下有多个文件需要编译时，需要大量的编译时间。</p><p>使用makefile编译程序，makefile只会编译工作目录中改动的部分代码。</p><p>这也是使用makefile编译程序的核心目的。</p><p><strong>用makefile节省你的工作时间。</strong></p><ul><li>如果target是最新生成的，那么make不会执行makefile文件中的任何命令；</li><li>如果target不存在或者target不是最新的，那么make会执行makefile文件中生成target所关联的命令，并根据需要递归地执行生成其他依赖文件的命令；</li><li>如果target关联的某些源代码文件被修改，或者target的某些依赖文件缺失，那么make会执行命令生成最新的依赖文件，并执行makefile文件中生成target所关联的命令。</li></ul><hr><h2 id="3-man-man-man-makefile！学会怎么使用makefile。"><a href="#3-man-man-man-makefile！学会怎么使用makefile。" class="headerlink" title="3. man man man makefile！学会怎么使用makefile。"></a>3. <strong>man man man makefile！</strong>学会怎么使用makefile。</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmd">make [选项] [目标] # 执行选定目标(target)命令<br>make # 默认执行第一个makefile命令<br></code></pre></td></tr></table></figure><p>一个makefile文件中包含多个makefile命令。</p><p>一个完整的makefile命令包含：</p><ol><li>目标：<strong>target</strong></li><li>依赖：<strong>dependence</strong></li><li>命令：<strong>command</strong></li></ol><p>一个正确的makefile的基本格式：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">target:dependences1 dependences2……</span><br>&lt;tab&gt;commands1 commands2……<br></code></pre></td></tr></table></figure><p><strong>注意</strong>：</p><ul><li>command列表中的每一个<strong>命令</strong>用<code>一个空格</code>隔开</li><li>dependence列表中的每一个<strong>依赖</strong>用<code>一个空格</code>隔开</li><li>其余任何地方不能出现空格</li><li>makefile文件中的注释用<code>#</code></li></ul><hr><h2 id="4-用makefile命名你的makefile！禁止套娃！makefile编译过程。"><a href="#4-用makefile命名你的makefile！禁止套娃！makefile编译过程。" class="headerlink" title="4. 用makefile命名你的makefile！禁止套娃！makefile编译过程。"></a>4. 用makefile命名你的makefile！禁止套娃！makefile编译过程。</h2><p>当文件中同时存在<code>makefile</code>文件与<code>Makefile</code>文件时</p><ul><li>使用<code>make</code>命令会优先执行<code>makefile</code>文件。当没有找到<code>makefile</code>文件时，会转而寻找洽谈文件。</li><li>如果想要执行<code>Makefile</code>文件，需要使用<code>make -f Makefile</code>。</li></ul><p><strong>如果我写了很多个makefile文件，天知道我应该执行哪个！所以，只写一个叫makefile的makefile吧</strong></p><hr><h2 id="5-makefile选项，选择适合你的方式。"><a href="#5-makefile选项，选择适合你的方式。" class="headerlink" title="5. makefile选项，选择适合你的方式。"></a>5. makefile选项，选择适合你的方式。</h2><ul><li><code>-f</code> 选择<code>makefile</code>文件作为<code>make</code>命令的输入文件。</li><li><code>-B</code> 无条件执行所有目标。</li><li><code>-n</code> 只打印命令不执行命令。</li></ul><hr><h2 id="6-ERROR！是makefile的问题？不，是你的问题！"><a href="#6-ERROR！是makefile的问题？不，是你的问题！" class="headerlink" title="6. ERROR！是makefile的问题？不，是你的问题！"></a>6. ERROR！是makefile的问题？不，是你的问题！</h2><ul><li>依赖和目标拼写错误。</li><li><tab>写成了空格。</li><li>重复编译同一目标。</li><li>也许是其他文件的问题。</li></ul><hr><h2 id="7-写一个makefile吧！"><a href="#7-写一个makefile吧！" class="headerlink" title="7. 写一个makefile吧！"></a>7. 写一个makefile吧！</h2><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">main:main.o myAdd.o myDiv.o myMinus.o myMulti.o</span><br>gcc main.o myAdd.o myDiv.o myMinus.o myMulti.o -o main<br><br><span class="hljs-section">myAdd.o:myAdd.c</span><br>gcc -c myAdd.c -o myAdd.o<br><br><span class="hljs-section">myMinus.o:myMinus.c</span><br>gcc -c myMinus.c -o myMinus.o<br><br><span class="hljs-section">myMulti.o:myMulti.c</span><br>gcc -c myMulti.c -o myMulti.o<br><br><span class="hljs-section">myDiv.o:myDiv.c</span><br>gcc -c myDiv.c -o myDiv.o<br><br><span class="hljs-section">main.o:main.c</span><br>gcc -c main.c -o main.o<br><br><span class="hljs-section">clean:</span><br>@rm -rf *.o main<br></code></pre></td></tr></table></figure><p>首先，你得有这些：</p><p>把上面的代码复制到makefile里面吧。</p><p><strong>然后？make！</strong></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">make<br></code></pre></td></tr></table></figure><p>接下来会发生什么呢？</p><p>首先。</p><p>之前说过，一个<code>make</code>命令会优先找文件夹下有没有<code>makefile</code>文件。</p><p>结果就是，找到了。</p><p>可是你没有告诉<code>make</code>它的执行<code>目标(target)</code>。</p><p>那么它会默认将第一个<code>target</code>作为它的生成目标。</p><p>Oh！你的<code>target</code>叫<code>main</code>，你的最终目标是一个叫<code>main</code>的可执行文件。</p><p>那么要用到那些文件来达成你这个目标呢？</p><p><code>main.o</code> <code>myAdd.o</code> <code>myDiv.o</code> <code>myMinus.o</code> <code>myMulti.o</code> </p><p>上面的就是你的<code>dependence</code>列表了。</p><p>也就是生成你的<code>目标(target)</code>需要用到的<code>依赖(dependence)</code>。</p><p>注意到它们之间有空格，这是必须的。</p><p>接下来，编译？递归？或者说栈？</p><p><code>make</code>会根据你的<code>makefile文件</code>中描述的<code>依赖(dependence)</code>关系来生成你的<code>目标(target)</code>。</p><p>如果<code>目标(target)</code>的依赖下面还有依赖怎么办？</p><p>那当然是一层层套娃，其实就是一个自下而上的<code>递归</code>，直到所有的<code>依赖(dependence)</code>都被满足了。</p><p>这个目标才会被编译，而编译的过程就是递归调用一层一层<code>return</code>的过程。</p><p>最终，你的目标(target)实现了！</p><p>看看吧选择你的文件夹下多了一个<code>main</code>文件。</p><p>执行它，就是你想要的结果。</p><p>担心程序有bug？</p><p>那你最好使用<code>-g</code>的编译语句来书写你的makefile。</p><hr><h2 id="8-全是字母？别担心，用变量吧。"><a href="#8-全是字母？别担心，用变量吧。" class="headerlink" title="8. 全是字母？别担心，用变量吧。"></a>8. 全是字母？别担心，用变量吧。</h2><ol><li><p>系统变量</p><ul><li><p><code>$@</code>：表示目标文件的完整名称。</p></li><li><p><code>$^</code>：表示所有不重复的依赖文件</p></li></ul><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-comment"># 用$@替换上述代码中的目标文件，即[target]</span><br><span class="hljs-comment"># 用$……替换上述代码中的依赖文件，即[dependence]</span><br><span class="hljs-section">main:main.o myAdd.o myDiv.o myMinus.o myMulti.o</span><br>gcc <span class="hljs-variable">$^</span> -o <span class="hljs-variable">$@</span><br><br><span class="hljs-section">myAdd.o:myAdd.c</span><br>gcc -c <span class="hljs-variable">$^</span> -o <span class="hljs-variable">$@</span><br><br><span class="hljs-section">myMinus.o:myMinus.c</span><br>gcc -c <span class="hljs-variable">$^</span> -o <span class="hljs-variable">$@</span><br><br><span class="hljs-section">myMulti.o:myMulti.c</span><br>gcc -c <span class="hljs-variable">$^</span> -o <span class="hljs-variable">$@</span><br><br><span class="hljs-section">myDiv.o:myDiv.c</span><br>gcc -c <span class="hljs-variable">$^</span> -o <span class="hljs-variable">$@</span><br><br><span class="hljs-section">main.o:main.c</span><br>gcc -c <span class="hljs-variable">$^</span> -o <span class="hljs-variable">$@</span><br><br><span class="hljs-section">clean:</span><br>@rm -rf *.o main<br></code></pre></td></tr></table></figure></li><li><p>系统常量</p><ul><li><p><code>RM</code>：删除</p></li><li><p><code>CC</code>：C语言编译程序</p></li></ul><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-comment"># 用$(CC)替换上述代码中的gcc编译命令</span><br><span class="hljs-section">main:main.o myAdd.o myDiv.o myMinus.o myMulti.o</span><br><span class="hljs-variable">$(CC)</span> <span class="hljs-variable">$^</span> -o <span class="hljs-variable">$@</span><br><br><span class="hljs-section">myAdd.o:myAdd.c</span><br><span class="hljs-variable">$(CC)</span> -c <span class="hljs-variable">$^</span> -o <span class="hljs-variable">$@</span><br><br><span class="hljs-section">myMinus.o:myMinus.c</span><br><span class="hljs-variable">$(CC)</span> -c <span class="hljs-variable">$^</span> -o <span class="hljs-variable">$@</span><br><br><span class="hljs-section">myMulti.o:myMulti.c</span><br><span class="hljs-variable">$(CC)</span> -c <span class="hljs-variable">$^</span> -o <span class="hljs-variable">$@</span><br><br><span class="hljs-section">myDiv.o:myDiv.c</span><br><span class="hljs-variable">$(CC)</span> -c <span class="hljs-variable">$^</span> -o <span class="hljs-variable">$@</span><br><br><span class="hljs-section">main.o:main.c</span><br><span class="hljs-variable">$(CC)</span> -c <span class="hljs-variable">$^</span> -o <span class="hljs-variable">$@</span><br><br><span class="hljs-section">clean:</span><br>@<span class="hljs-variable">$(RM)</span> *.o main<br></code></pre></td></tr></table></figure></li><li><p>自定义变量</p><ul><li>使用<code>[常量名]=[值]</code>的形式定义自定义常量</li><li>使用<code>$()</code>取自定义变量的值</li></ul><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs makefile">OBJS=main.o myAdd.o myDiv.o myMinus.o myMulti.o<br><span class="hljs-comment"># 变量自定义赋值</span><br>TARGET=main<br><br><span class="hljs-comment"># 变量取值用$()</span><br><span class="hljs-variable">$(TARGET)</span>:<span class="hljs-variable">$(OBJS)</span><br><span class="hljs-variable">$(CC)</span> <span class="hljs-variable">$^</span> -o <span class="hljs-variable">$@</span><br><br><span class="hljs-section">myAdd.o:myAdd.c</span><br><span class="hljs-variable">$(CC)</span> -c <span class="hljs-variable">$^</span> -o <span class="hljs-variable">$@</span><br><br><span class="hljs-section">myMinus.o:myMinus.c</span><br><span class="hljs-variable">$(CC)</span> -c <span class="hljs-variable">$^</span> -o <span class="hljs-variable">$@</span><br><br><span class="hljs-section">myMulti.o:myMulti.c</span><br><span class="hljs-variable">$(CC)</span> -c <span class="hljs-variable">$^</span> -o <span class="hljs-variable">$@</span><br><br><span class="hljs-section">myDiv.o:myDiv.c</span><br><span class="hljs-variable">$(CC)</span> -c <span class="hljs-variable">$^</span> -o <span class="hljs-variable">$@</span><br><br><span class="hljs-section">main.o:main.c</span><br><span class="hljs-variable">$(CC)</span> -c <span class="hljs-variable">$^</span> -o <span class="hljs-variable">$@</span><br><br><span class="hljs-section">clean:</span><br>@<span class="hljs-variable">$(RM)</span> *.o main<br></code></pre></td></tr></table></figure><p>这只是一些简单的变量，其他的等待后续补充吧。</p><p>是不是简单了很多？别担心，还会更简单的！</p></li></ol><hr><h2 id="9-还是有太多冗余了，也许我该考虑更好的方法。模式匹配是个不错的选择。"><a href="#9-还是有太多冗余了，也许我该考虑更好的方法。模式匹配是个不错的选择。" class="headerlink" title="9. 还是有太多冗余了，也许我该考虑更好的方法。模式匹配是个不错的选择。"></a>9. 还是有太多冗余了，也许我该考虑更好的方法。模式匹配是个不错的选择。</h2><p>一些简单的简单的<code>makefile模式匹配</code></p><ul><li><p><code>%[目标]:%[依赖]</code>：我想不用我解释了。</p></li><li><p><code>wildcard</code>：匹配文件。</p></li></ul><p>​使用实例：获取指定目录下所有的.c文件。</p><ul><li><code>patsubst</code>：模式匹配与替换。</li></ul><p>​使用实例：指定目录下所有的.c文件替换成.o文件。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-comment"># 使用文件匹配替换依赖[dependence]</span><br>OBJS=<span class="hljs-variable">$(<span class="hljs-built_in">patsubst</span> %.c, %.o, $(<span class="hljs-built_in">wildcard</span> ./*.c)</span>)<br><span class="hljs-comment"># 变量自定义赋值</span><br>TARGET=main<br><br><span class="hljs-comment"># 变量取值用$()</span><br><span class="hljs-variable">$(TARGET)</span>:<span class="hljs-variable">$(OBJS)</span><br><span class="hljs-variable">$(CC)</span> <span class="hljs-variable">$^</span> -o <span class="hljs-variable">$@</span><br><br><span class="hljs-comment"># 模式匹配 %[目标]:%[依赖]</span><br><span class="hljs-section">%.o:%.c</span><br><span class="hljs-variable">$(CC)</span> -c <span class="hljs-variable">$^</span> -o <span class="hljs-variable">$@</span><br><br><span class="hljs-comment"># 伪目标(伪文件)，指执行命令，不生成文件</span><br><span class="hljs-meta"><span class="hljs-keyword">.PHONY</span>: clean</span><br><br><span class="hljs-section">clean:</span><br>@<span class="hljs-variable">$(RM)</span> *.o main<br><br><span class="hljs-comment"># `wildcard`：匹配文件 ()</span><br><span class="hljs-comment"># `patsubst`：模式匹配与替换</span><br><span class="hljs-section">show:</span><br>@echo <span class="hljs-variable">$(<span class="hljs-built_in">wildcard</span> ./*.c)</span><br>@echo <span class="hljs-variable">$(<span class="hljs-built_in">patsubst</span> %.c, %.o, $(<span class="hljs-built_in">wildcard</span> ./*.c)</span>)<br></code></pre></td></tr></table></figure><p><code>tip</code>：有个小概念，什么是伪目标？或者该叫他伪文件。</p><p>所有的目标(target)最终都会生成一个同名的目标文件。</p><p>也许有时候我不希望它生成。</p><p>这个时候就可以用<code>.PHONY: clean</code>来修饰这个<code>目标(target)</code>。</p><p>当需要生成这个<code>目标(target)</code>时，不会生成文件，而只是执行命令。</p><hr><h2 id="10-Triple-Star！最重要的一集。makefile动态库。"><a href="#10-Triple-Star！最重要的一集。makefile动态库。" class="headerlink" title="10. Triple Star！最重要的一集。makefile动态库。"></a>10. Triple Star！最重要的一集。makefile动态库。</h2><p>最无聊的概念时间：</p><p>动态库就是：<code>windows</code>中的<code>.dll</code>文件，<code>linux</code>中的<code>.so</code>文件。</p><p>那么它有什么特点？</p><p>不会把代码编译到二进制文件中，而是在运行时候才会去加载，所以只需要一个地址。</p><p>不会编译成二进制文件？也就是不能反向学习了。</p><p><em><strong>用于生成动态库的编译常用参数：</strong></em></p><ul><li><p><code>-fPIC</code> 产生位置无关的代码。</p></li><li><p><code>-shared</code> 共享。</p></li><li><p><code>-l</code> (小写L)，手动指定动态库。</p></li><li><p><code>-I</code> (大写i)，指定头文件目录，默认当前目录.</p></li><li><p><code>-L</code> 手动指定库文件搜索目录, 默认只链接共享目录。</p></li></ul><p>如何生成一个动态库？</p><p><code>gcc -c [源文件名].c -o [自定义文件名].o</code></p><p><code>gcc -shared -fPIC [待生成文件名].o -o [lib生成文件名].so</code></p><p><strong>必须是<code>.o</code>文件！</strong></p><p><strong>必须是<code>.o</code>文件！！</strong></p><p><strong>必须是<code>.o</code>文件！！！</strong></p><p>这样就好了。</p><p>当然了作为动态库文件，命名时必须以<code>lib</code>开头，自定义但没有完全自定义。</p><p>生成好了，没有报错，怎么用？</p><p>正确的：<code>gcc *.c -lMyAdd -L./ -o main</code></p><p>错误的：<code>gcc -o main main.c -L./ -lMyAdd</code></p><p><strong>注意命令顺序</strong></p><p>还是一个命令解决。</p><p>这样就使用生成的动态库文件编译好了一个程序。</p><p>但是出错了？意料之中，这里有两个简单的解决办法。</p><p>运行时手动指定动态库目录：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-function">MacOS:</span><br><span class="hljs-function"><span class="hljs-title">DYLD_LIBRARY_PATH</span>=./<span class="hljs-title">src_so</span></span><br><span class="hljs-function"><span class="hljs-title">export</span> <span class="hljs-title">DYLD_LIBRARY_PATH</span></span><br><span class="hljs-function"><span class="hljs-title">Linux</span>:</span><br><span class="hljs-function"><span class="hljs-title">LD_LIBRARY_PATH</span>=./<span class="hljs-title">src_so</span></span><br><span class="hljs-function"><span class="hljs-title">export</span> <span class="hljs-title">DYLD_LIBRARY_PATH</span></span><br></code></pre></td></tr></table></figure><p><code>cp libMyAdd.so /usr/lib/</code>将文件拷贝到<code>/usr/lib/</code>文件夹下。</p><p>还是不行？</p><p>问<a href="https://chat18.aichatos.xyz/#/chat/1706331925787"><code>OpenAI</code></a>吧。</p><p>但是尽量跟用户手册搭配使用哦。</p><h2 id="11-世界是绝对的运动和相对的静止。makefile静态库！-我都懒得提"><a href="#11-世界是绝对的运动和相对的静止。makefile静态库！-我都懒得提" class="headerlink" title="11. 世界是绝对的运动和相对的静止。makefile静态库！(我都懒得提)"></a>11. 世界是绝对的运动和相对的静止。makefile静态库！(我都懒得提)</h2><p>静态链接库的生成方式：</p><p><code>target</code>为以<code>.a</code>为后缀名的文件。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-variable">$(AR)</span> -r <span class="hljs-variable">$(target)</span> <span class="hljs-variable">$^</span><br></code></pre></td></tr></table></figure><p>如何使用静态库或者动态库，：</p><p><code>gcc *.c -lMyAdd -L./ -o main</code></p><p><strong>注意命令的书写书序，一定是动态或者静态库文件在其他文件之前。</strong></p><p>静态链接库：会把静态库的代码编译到二进制中，当程序编译完成后，该文件可以删除。</p><p>缺点： 程序体积过大，并且库中的内容如果有更新，则需要重新编译生成程序。</p><p>只有缺点？</p><p>是的，只有缺点。</p><p>所以，别用了。</p><p>你问我玩意用到了？</p><p><a href="https://chat18.aichatos.xyz/#/chat/1706331925787"><code>OpenAI</code></a>吧，别烦了。</p>]]></content>
    
    
    <categories>
      
      <category>开发工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C语言</tag>
      
      <tag>Makefile</tag>
      
      <tag>Linux</tag>
      
      <tag>编译工具</tag>
      
      <tag>C/C++</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
